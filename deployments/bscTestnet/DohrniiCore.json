{
  "address": "0x69c5db71bb6b7DE5951765216c1FcA66FCA4702b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_fei",
          "type": "address"
        }
      ],
      "name": "FeiUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_genesisGroup",
          "type": "address"
        }
      ],
      "name": "GenesisGroupUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "GenesisPeriodComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "TribeAllocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tribe",
          "type": "address"
        }
      ],
      "name": "TribeUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PCV_CONTROLLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "allocateTribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "adminRole",
          "type": "bytes32"
        }
      ],
      "name": "createRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fei",
      "outputs": [
        {
          "internalType": "contract IFei",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "burner",
          "type": "address"
        }
      ],
      "name": "grantBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "grantGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "grantGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "grantMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pcvController",
          "type": "address"
        }
      ],
      "name": "grantPCVController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fei",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tribe",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isBurner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isPCVController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "burner",
          "type": "address"
        }
      ],
      "name": "revokeBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "revokeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "revokeGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "revokeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeOverride",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pcvController",
          "type": "address"
        }
      ],
      "name": "revokePCVController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setFei",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setTribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tribe",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x192d4d7a5110001c6a033d9e90c2a76d7b17fb8a4e83aacc34c3bfcf87cc5b82",
  "receipt": {
    "to": null,
    "from": "0xd0BE34550AC47e616B7220564605BA00912A5FeF",
    "contractAddress": "0x69c5db71bb6b7DE5951765216c1FcA66FCA4702b",
    "transactionIndex": 2,
    "gasUsed": "1601717",
    "logsBloom": "0x00000004000010000800000000000000080000000000000000000000000000000001000000000002000000000000004000000001200000000000000000000000000000000000000000000000000000200000040000000000000000020000000000000000020000400000000000000800000000000100000000000000001000000000000000000000000000040000000000000000000000000000000000004000000200000000000000000000000000000000000000004002001000000000000000040000020000000000000000000000001000000000100100000000020020000000000000000000000000000000000000000020000000000000000000040000",
    "blockHash": "0xe7a5f6f283a9dc0a52b59f2e83504764ea7bc866a0bbe39c4cd8dcb0daccb67e",
    "transactionHash": "0x192d4d7a5110001c6a033d9e90c2a76d7b17fb8a4e83aacc34c3bfcf87cc5b82",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 12293316,
        "transactionHash": "0x192d4d7a5110001c6a033d9e90c2a76d7b17fb8a4e83aacc34c3bfcf87cc5b82",
        "address": "0x69c5db71bb6b7DE5951765216c1FcA66FCA4702b",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x899bd46557473cb80307a9dabc297131ced39608330a2d29b2d52b660c03923e",
          "0x00000000000000000000000069c5db71bb6b7de5951765216c1fca66fca4702b",
          "0x000000000000000000000000d0be34550ac47e616b7220564605ba00912a5fef"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe7a5f6f283a9dc0a52b59f2e83504764ea7bc866a0bbe39c4cd8dcb0daccb67e"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 12293316,
        "transactionHash": "0x192d4d7a5110001c6a033d9e90c2a76d7b17fb8a4e83aacc34c3bfcf87cc5b82",
        "address": "0x69c5db71bb6b7DE5951765216c1FcA66FCA4702b",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x899bd46557473cb80307a9dabc297131ced39608330a2d29b2d52b660c03923e"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe7a5f6f283a9dc0a52b59f2e83504764ea7bc866a0bbe39c4cd8dcb0daccb67e"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 12293316,
        "transactionHash": "0x192d4d7a5110001c6a033d9e90c2a76d7b17fb8a4e83aacc34c3bfcf87cc5b82",
        "address": "0x69c5db71bb6b7DE5951765216c1FcA66FCA4702b",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x899bd46557473cb80307a9dabc297131ced39608330a2d29b2d52b660c03923e"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xe7a5f6f283a9dc0a52b59f2e83504764ea7bc866a0bbe39c4cd8dcb0daccb67e"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 12293316,
        "transactionHash": "0x192d4d7a5110001c6a033d9e90c2a76d7b17fb8a4e83aacc34c3bfcf87cc5b82",
        "address": "0x69c5db71bb6b7DE5951765216c1FcA66FCA4702b",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x0866eae1216ed05a11636a648003f3f62921eb97ccb05acc30636f62958a8bd6",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x899bd46557473cb80307a9dabc297131ced39608330a2d29b2d52b660c03923e"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xe7a5f6f283a9dc0a52b59f2e83504764ea7bc866a0bbe39c4cd8dcb0daccb67e"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 12293316,
        "transactionHash": "0x192d4d7a5110001c6a033d9e90c2a76d7b17fb8a4e83aacc34c3bfcf87cc5b82",
        "address": "0x69c5db71bb6b7DE5951765216c1FcA66FCA4702b",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x899bd46557473cb80307a9dabc297131ced39608330a2d29b2d52b660c03923e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x899bd46557473cb80307a9dabc297131ced39608330a2d29b2d52b660c03923e"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xe7a5f6f283a9dc0a52b59f2e83504764ea7bc866a0bbe39c4cd8dcb0daccb67e"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 12293316,
        "transactionHash": "0x192d4d7a5110001c6a033d9e90c2a76d7b17fb8a4e83aacc34c3bfcf87cc5b82",
        "address": "0x69c5db71bb6b7DE5951765216c1FcA66FCA4702b",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x899bd46557473cb80307a9dabc297131ced39608330a2d29b2d52b660c03923e"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xe7a5f6f283a9dc0a52b59f2e83504764ea7bc866a0bbe39c4cd8dcb0daccb67e"
      }
    ],
    "blockNumber": 12293316,
    "cumulativeGasUsed": "1643717",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a1c9c935ba7246b4f63cdd13d1219e7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fei\",\"type\":\"address\"}],\"name\":\"FeiUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_genesisGroup\",\"type\":\"address\"}],\"name\":\"GenesisGroupUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"GenesisPeriodComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TribeAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tribe\",\"type\":\"address\"}],\"name\":\"TribeUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PCV_CONTROLLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateTribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"name\":\"createRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fei\",\"outputs\":[{\"internalType\":\"contract IFei\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"grantBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"grantGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"grantGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"grantMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pcvController\",\"type\":\"address\"}],\"name\":\"grantPCVController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fei\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tribe\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBurner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isPCVController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"revokeBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"revokeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"revokeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pcvController\",\"type\":\"address\"}],\"name\":\"revokePCVController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setFei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setTribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tribe\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Fei Protocol\",\"kind\":\"dev\",\"methods\":{\"allocateTribe(address,uint256)\":{\"params\":{\"amount\":\"the amount of TRIBE to send\",\"to\":\"the address to send TRIBE to\"}},\"createRole(bytes32,bytes32)\":{\"details\":\"can also be used to update admin of existing role\",\"params\":{\"adminRole\":\"the admin role id for `role`\",\"role\":\"the new role id\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantBurner(address)\":{\"params\":{\"burner\":\"new burner\"}},\"grantGovernor(address)\":{\"params\":{\"governor\":\"new governor\"}},\"grantGuardian(address)\":{\"params\":{\"guardian\":\"new guardian\"}},\"grantMinter(address)\":{\"params\":{\"minter\":\"new minter\"}},\"grantPCVController(address)\":{\"params\":{\"pcvController\":\"new controller\"}},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isBurner(address)\":{\"params\":{\"_address\":\"address to check\"},\"returns\":{\"_0\":\"true _address is a burner\"}},\"isGovernor(address)\":{\"params\":{\"_address\":\"address to check\"},\"returns\":{\"_0\":\"true _address is a governor\"}},\"isGuardian(address)\":{\"params\":{\"_address\":\"address to check\"},\"returns\":{\"_0\":\"true _address is a guardian\"}},\"isMinter(address)\":{\"params\":{\"_address\":\"address to check\"},\"returns\":{\"_0\":\"true _address is a minter\"}},\"isPCVController(address)\":{\"params\":{\"_address\":\"address to check\"},\"returns\":{\"_0\":\"true _address is a controller\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeBurner(address)\":{\"params\":{\"burner\":\"ex burner\"}},\"revokeGovernor(address)\":{\"params\":{\"governor\":\"ex governor\"}},\"revokeGuardian(address)\":{\"params\":{\"guardian\":\"ex guardian\"}},\"revokeMinter(address)\":{\"params\":{\"minter\":\"ex minter\"}},\"revokeOverride(bytes32,address)\":{\"params\":{\"account\":\"the address to revoke the role from\",\"role\":\"the role to revoke\"}},\"revokePCVController(address)\":{\"params\":{\"pcvController\":\"ex pcvController\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"setFei(address)\":{\"params\":{\"token\":\"new fei address\"}},\"setTribe(address)\":{\"params\":{\"token\":\"new tribe address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"Source of truth for Fei Protocol\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allocateTribe(address,uint256)\":{\"notice\":\"sends TRIBE tokens from treasury to an address\"},\"createRole(bytes32,bytes32)\":{\"notice\":\"creates a new role to be maintained\"},\"fei()\":{\"notice\":\"the address of the FEI contract\"},\"grantBurner(address)\":{\"notice\":\"grants burner role to address\"},\"grantGovernor(address)\":{\"notice\":\"grants governor role to address\"},\"grantGuardian(address)\":{\"notice\":\"grants guardian role to address\"},\"grantMinter(address)\":{\"notice\":\"grants minter role to address\"},\"grantPCVController(address)\":{\"notice\":\"grants controller role to address\"},\"isBurner(address)\":{\"notice\":\"checks if address is a burner\"},\"isGovernor(address)\":{\"notice\":\"checks if address is a governor\"},\"isGuardian(address)\":{\"notice\":\"checks if address is a guardian\"},\"isMinter(address)\":{\"notice\":\"checks if address is a minter\"},\"isPCVController(address)\":{\"notice\":\"checks if address is a controller\"},\"revokeBurner(address)\":{\"notice\":\"revokes burner role from address\"},\"revokeGovernor(address)\":{\"notice\":\"revokes governor role from address\"},\"revokeGuardian(address)\":{\"notice\":\"revokes guardian role from address\"},\"revokeMinter(address)\":{\"notice\":\"revokes minter role from address\"},\"revokeOverride(bytes32,address)\":{\"notice\":\"revokes a role from address\"},\"revokePCVController(address)\":{\"notice\":\"revokes pcvController role from address\"},\"setFei(address)\":{\"notice\":\"sets Fei address to a new address\"},\"setTribe(address)\":{\"notice\":\"sets Tribe address to a new address\"},\"tribe()\":{\"notice\":\"the address of the TRIBE contract\"}},\"notice\":\"maintains roles, access control, fei, tribe, genesisGroup, and the TRIBE treasury\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Core.sol\":\"Core\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/Core.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"../openzeppelin/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./Permissions.sol\\\";\\nimport \\\"./ICore.sol\\\";\\nimport \\\"../token/Fei.sol\\\";\\nimport \\\"../dao/Tribe.sol\\\";\\n\\n/// @title Source of truth for Fei Protocol\\n/// @author Fei Protocol\\n/// @notice maintains roles, access control, fei, tribe, genesisGroup, and the TRIBE treasury\\ncontract Core is ICore, Permissions, Initializable {\\n\\n    /// @notice the address of the FEI contract\\n    IFei public override fei;\\n    \\n    /// @notice the address of the TRIBE contract\\n    IERC20 public override tribe;\\n\\n    // function init() external override initializer {\\n    //     _setupGovernor(msg.sender);\\n        \\n    //     Fei _fei = new Fei(address(this));\\n    //     _setFei(address(_fei));\\n\\n    //     Tribe _tribe = new Tribe(address(this), msg.sender);\\n    //     _setTribe(address(_tribe));\\n    // }\\n\\n    function init(address _fei, address _tribe) external override initializer {\\n        _setupGovernor(msg.sender);\\n        \\n        // Fei _fei = new Fei(address(this));\\n        _setFei(address(_fei));\\n\\n        // Tribe _tribe = new Tribe(address(this), msg.sender);\\n        _setTribe(address(_tribe));\\n    }\\n\\n    /// @notice sets Fei address to a new address\\n    /// @param token new fei address\\n    function setFei(address token) external override onlyGovernor {\\n        _setFei(token);\\n    }\\n\\n    /// @notice sets Tribe address to a new address\\n    /// @param token new tribe address\\n    function setTribe(address token) external override onlyGovernor {\\n        _setTribe(token);\\n    }\\n\\n    /// @notice sends TRIBE tokens from treasury to an address\\n    /// @param to the address to send TRIBE to\\n    /// @param amount the amount of TRIBE to send\\n    function allocateTribe(address to, uint256 amount)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        IERC20 _tribe = tribe;\\n        require(\\n            _tribe.balanceOf(address(this)) >= amount,\\n            \\\"Core: Not enough Tribe\\\"\\n        );\\n\\n        _tribe.transfer(to, amount);\\n\\n        emit TribeAllocation(to, amount);\\n    }\\n\\n    function _setFei(address token) internal {\\n        fei = IFei(token);\\n        emit FeiUpdate(token);\\n    }\\n\\n    function _setTribe(address token) internal {\\n        tribe = IERC20(token);\\n        emit TribeUpdate(token);\\n    }\\n}\\n\",\"keccak256\":\"0x6801fa20567044601beccf0d293d48a385847293ea342a79dcd91a71f3bf56f1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/ICore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IPermissions.sol\\\";\\nimport \\\"../token/IFei.sol\\\";\\n\\n/// @title Core Interface\\n/// @author Fei Protocol\\ninterface ICore is IPermissions {\\n    // ----------- Events -----------\\n\\n    event FeiUpdate(address indexed _fei);\\n    event TribeUpdate(address indexed _tribe);\\n    event GenesisGroupUpdate(address indexed _genesisGroup);\\n    event TribeAllocation(address indexed _to, uint256 _amount);\\n    event GenesisPeriodComplete(uint256 _timestamp);\\n\\n    // ----------- Governor only state changing api -----------\\n\\n    function init(address _fei, address _trib) external;\\n\\n    // ----------- Governor only state changing api -----------\\n\\n    function setFei(address token) external;\\n\\n    function setTribe(address token) external;\\n\\n    function allocateTribe(address to, uint256 amount) external;\\n\\n    // ----------- Getters -----------\\n\\n    function fei() external view returns (IFei);\\n\\n    function tribe() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0x5be20539a6b2b3297d68ac6ec1a21d19dd873a2ab4f8d7f0077703ead888b634\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/IPermissions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"../openzeppelin/access/AccessControl.sol\\\";\\n\\n\\n/// @title Permissions interface\\n/// @author Fei Protocol\\ninterface IPermissions is IAccessControl {\\n    // ----------- Governor only state changing api -----------\\n\\n    function createRole(bytes32 role, bytes32 adminRole) external;\\n\\n    function grantMinter(address minter) external;\\n\\n    function grantBurner(address burner) external;\\n\\n    function grantPCVController(address pcvController) external;\\n\\n    function grantGovernor(address governor) external;\\n\\n    function grantGuardian(address guardian) external;\\n\\n    function revokeMinter(address minter) external;\\n\\n    function revokeBurner(address burner) external;\\n\\n    function revokePCVController(address pcvController) external;\\n\\n    function revokeGovernor(address governor) external;\\n\\n    function revokeGuardian(address guardian) external;\\n\\n    // ----------- Revoker only state changing api -----------\\n\\n    function revokeOverride(bytes32 role, address account) external;\\n\\n    // ----------- Getters -----------\\n\\n    function isBurner(address _address) external view returns (bool);\\n\\n    function isMinter(address _address) external view returns (bool);\\n\\n    function isGovernor(address _address) external view returns (bool);\\n\\n    function isGuardian(address _address) external view returns (bool);\\n\\n    function isPCVController(address _address) external view returns (bool);\\n\\n    function GUARDIAN_ROLE() external view returns (bytes32);\\n\\n    function GOVERN_ROLE() external view returns (bytes32);\\n\\n    function BURNER_ROLE() external view returns (bytes32);\\n\\n    function MINTER_ROLE() external view returns (bytes32);\\n\\n    function PCV_CONTROLLER_ROLE() external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x2e3fcb8607aa8f793c9471f3946c3cf4c0925e2564f2fdfe79e3a3cfc98fa5bb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/Permissions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"../openzeppelin/access/AccessControlEnumerable.sol\\\";\\nimport \\\"./IPermissions.sol\\\";\\n\\n/// @title Access control module for Core\\n/// @author Fei Protocol\\ncontract Permissions is IPermissions, AccessControlEnumerable {\\n    bytes32 public constant override BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n    bytes32 public constant override MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant override PCV_CONTROLLER_ROLE = keccak256(\\\"PCV_CONTROLLER_ROLE\\\");\\n    bytes32 public constant override GOVERN_ROLE = keccak256(\\\"GOVERN_ROLE\\\");\\n    bytes32 public constant override GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n\\n    constructor() {\\n        // Appointed as a governor so guardian can have indirect access to revoke ability\\n        _setupGovernor(address(this));\\n\\n        _setRoleAdmin(MINTER_ROLE, GOVERN_ROLE);\\n        _setRoleAdmin(BURNER_ROLE, GOVERN_ROLE);\\n        _setRoleAdmin(PCV_CONTROLLER_ROLE, GOVERN_ROLE);\\n        _setRoleAdmin(GOVERN_ROLE, GOVERN_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, GOVERN_ROLE);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(\\n            isGovernor(msg.sender),\\n            \\\"Permissions: Caller is not a governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(isGuardian(msg.sender), \\\"Permissions: Caller is not a guardian\\\");\\n        _;\\n    }\\n\\n    /// @notice creates a new role to be maintained\\n    /// @param role the new role id\\n    /// @param adminRole the admin role id for `role`\\n    /// @dev can also be used to update admin of existing role\\n    function createRole(bytes32 role, bytes32 adminRole)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        _setRoleAdmin(role, adminRole);\\n    }\\n\\n    /// @notice grants minter role to address\\n    /// @param minter new minter\\n    function grantMinter(address minter) external override onlyGovernor {\\n        grantRole(MINTER_ROLE, minter);\\n    }\\n\\n    /// @notice grants burner role to address\\n    /// @param burner new burner\\n    function grantBurner(address burner) external override onlyGovernor {\\n        grantRole(BURNER_ROLE, burner);\\n    }\\n\\n    /// @notice grants controller role to address\\n    /// @param pcvController new controller\\n    function grantPCVController(address pcvController)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        grantRole(PCV_CONTROLLER_ROLE, pcvController);\\n    }\\n\\n    /// @notice grants governor role to address\\n    /// @param governor new governor\\n    function grantGovernor(address governor) external override onlyGovernor {\\n        grantRole(GOVERN_ROLE, governor);\\n    }\\n\\n    /// @notice grants guardian role to address\\n    /// @param guardian new guardian\\n    function grantGuardian(address guardian) external override onlyGovernor {\\n        grantRole(GUARDIAN_ROLE, guardian);\\n    }\\n\\n    /// @notice revokes minter role from address\\n    /// @param minter ex minter\\n    function revokeMinter(address minter) external override onlyGovernor {\\n        revokeRole(MINTER_ROLE, minter);\\n    }\\n\\n    /// @notice revokes burner role from address\\n    /// @param burner ex burner\\n    function revokeBurner(address burner) external override onlyGovernor {\\n        revokeRole(BURNER_ROLE, burner);\\n    }\\n\\n    /// @notice revokes pcvController role from address\\n    /// @param pcvController ex pcvController\\n    function revokePCVController(address pcvController)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        revokeRole(PCV_CONTROLLER_ROLE, pcvController);\\n    }\\n\\n    /// @notice revokes governor role from address\\n    /// @param governor ex governor\\n    function revokeGovernor(address governor) external override onlyGovernor {\\n        revokeRole(GOVERN_ROLE, governor);\\n    }\\n\\n    /// @notice revokes guardian role from address\\n    /// @param guardian ex guardian\\n    function revokeGuardian(address guardian) external override onlyGovernor {\\n        revokeRole(GUARDIAN_ROLE, guardian);\\n    }\\n\\n    /// @notice revokes a role from address\\n    /// @param role the role to revoke\\n    /// @param account the address to revoke the role from\\n    function revokeOverride(bytes32 role, address account)\\n        external\\n        override\\n        onlyGuardian\\n    {\\n        require(role != GOVERN_ROLE, \\\"Permissions: Guardian cannot revoke governor\\\");\\n\\n        // External call because this contract is appointed as a governor and has access to revoke\\n        this.revokeRole(role, account);\\n    }\\n\\n\\n    /// @notice checks if address is a minter\\n    /// @param _address address to check\\n    /// @return true _address is a minter\\n    function isMinter(address _address) external view override returns (bool) {\\n        return hasRole(MINTER_ROLE, _address);\\n    }\\n\\n    /// @notice checks if address is a burner\\n    /// @param _address address to check\\n    /// @return true _address is a burner\\n    function isBurner(address _address) external view override returns (bool) {\\n        return hasRole(BURNER_ROLE, _address);\\n    }\\n\\n    /// @notice checks if address is a controller\\n    /// @param _address address to check\\n    /// @return true _address is a controller\\n    function isPCVController(address _address)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return hasRole(PCV_CONTROLLER_ROLE, _address);\\n    }\\n\\n    /// @notice checks if address is a governor\\n    /// @param _address address to check\\n    /// @return true _address is a governor\\n    // only virtual for testing mock override\\n    function isGovernor(address _address)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return hasRole(GOVERN_ROLE, _address);\\n    }\\n\\n    /// @notice checks if address is a guardian\\n    /// @param _address address to check\\n    /// @return true _address is a guardian\\n    function isGuardian(address _address) public view override returns (bool) {\\n        return hasRole(GUARDIAN_ROLE, _address);\\n    }\\n\\n    function _setupGovernor(address governor) internal {\\n        _setupRole(GOVERN_ROLE, governor);\\n    }\\n}\\n\",\"keccak256\":\"0x8e4bc9ef4b1cd2c58c6d5df592679f534920ad804b29d91edcd08904c7b14011\",\"license\":\"GPL-3.0-or-later\"},\"contracts/dao/Tribe.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\n// Forked from Uniswap's UNI\\n// Reference: https://etherscan.io/address/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984#code\\n\\ncontract Tribe {\\n    /// @notice EIP-20 token name for this token\\n    // solhint-disable-next-line const-name-snakecase\\n    string public constant name = \\\"Tribe\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    // solhint-disable-next-line const-name-snakecase\\n    string public constant symbol = \\\"TRIBE\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    // solhint-disable-next-line const-name-snakecase\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    // solhint-disable-next-line const-name-snakecase\\n    uint public totalSupply = 1_000_000_000e18; // 1 billion Tribe\\n\\n    /// @notice Address which may mint new tokens\\n    address public minter;\\n\\n    /// @notice Allowance amounts on behalf of others\\n    mapping (address => mapping (address => uint96)) internal allowances;\\n\\n    /// @notice Official record of token balances for each account\\n    mapping (address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping (address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    /// @notice An event thats emitted when the minter address is changed\\n    event MinterChanged(address minter, address newMinter);\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Construct a new Tribe token\\n     * @param account The initial account to grant all the tokens\\n     * @param minter_ The account with minting ability\\n     */\\n    constructor(address account, address minter_) {\\n        balances[account] = uint96(totalSupply);\\n        emit Transfer(address(0), account, totalSupply);\\n        minter = minter_;\\n        emit MinterChanged(address(0), minter);\\n    }\\n\\n    /**\\n     * @notice Change the minter address\\n     * @param minter_ The address of the new minter\\n     */\\n    function setMinter(address minter_) external {\\n        require(msg.sender == minter, \\\"Tribe: only the minter can change the minter address\\\");\\n        emit MinterChanged(minter, minter_);\\n        minter = minter_;\\n    }\\n\\n    /**\\n     * @notice Mint new tokens\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to be minted\\n     */\\n    function mint(address dst, uint rawAmount) external {\\n        require(msg.sender == minter, \\\"Tribe: only the minter can mint\\\");\\n        require(dst != address(0), \\\"Tribe: cannot transfer to the zero address\\\");\\n\\n        // mint the amount\\n        uint96 amount = safe96(rawAmount, \\\"Tribe: amount exceeds 96 bits\\\");\\n        uint96 safeSupply = safe96(totalSupply, \\\"Tribe: totalSupply exceeds 96 bits\\\");\\n        totalSupply = add96(safeSupply, amount, \\\"Tribe: totalSupply exceeds 96 bits\\\");\\n\\n        // transfer the amount to the recipient\\n        balances[dst] = add96(balances[dst], amount, \\\"Tribe: transfer amount overflows\\\");\\n        emit Transfer(address(0), dst, amount);\\n\\n        // move delegates\\n        _moveDelegates(address(0), delegates[dst], amount);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint rawAmount) external returns (bool) {\\n        uint96 amount;\\n        if (rawAmount == type(uint).max) {\\n            amount = type(uint96).max;\\n        } else {\\n            amount = safe96(rawAmount, \\\"Tribe: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spends\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        uint96 amount;\\n        if (rawAmount == type(uint).max) {\\n            amount = type(uint96).max;\\n        } else {\\n            amount = safe96(rawAmount, \\\"Tribe: amount exceeds 96 bits\\\");\\n        }\\n\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"Tribe: invalid signature\\\");\\n        require(signatory == owner, \\\"Tribe: unauthorized\\\");\\n        require(block.timestamp <= deadline, \\\"Tribe: signature expired\\\");\\n\\n        allowances[owner][spender] = amount;\\n\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint rawAmount) external returns (bool) {\\n        uint96 amount = safe96(rawAmount, \\\"Tribe: amount exceeds 96 bits\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(rawAmount, \\\"Tribe: amount exceeds 96 bits\\\");\\n\\n        if (spender != src && spenderAllowance != type(uint96).max) {\\n            uint96 newAllowance = sub96(spenderAllowance, amount, \\\"Tribe: transfer amount exceeds spender allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"Tribe: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"Tribe: invalid nonce\\\");\\n        require(block.timestamp <= expiry, \\\"Tribe: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\\n        require(blockNumber < block.number, \\\"Tribe: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(address src, address dst, uint96 amount) internal {\\n        require(src != address(0), \\\"Tribe: cannot transfer from the zero address\\\");\\n        require(dst != address(0), \\\"Tribe: cannot transfer to the zero address\\\");\\n\\n        balances[src] = sub96(balances[src], amount, \\\"Tribe: transfer amount exceeds balance\\\");\\n        balances[dst] = add96(balances[dst], amount, \\\"Tribe: transfer amount overflows\\\");\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"Tribe: vote amount underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"Tribe: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\n      uint32 blockNumber = safe32(block.number, \\\"Tribe: block number exceeds 32 bits\\\");\\n\\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          numCheckpoints[delegatee] = nCheckpoints + 1;\\n      }\\n\\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal view returns (uint) {\\n        uint256 chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0xd1253880d6182a19ec8fb9544c2de836e795096ac05ae86b07c6d9165bac0521\",\"license\":\"GPL-3.0-or-later\"},\"contracts/openzeppelin/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\",\"keccak256\":\"0xd060501c9c057e905611ef9fc140a03c9784404653d1f15859b93311acbe5def\",\"license\":\"MIT\"},\"contracts/openzeppelin/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\",\"keccak256\":\"0xb461ccb8ea91f94ee2834e08fb127994c9f531b6d1d46d8419594afd4b46c45f\",\"license\":\"MIT\"},\"contracts/openzeppelin/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\",\"keccak256\":\"0x287306f447febc349d34d6b1ef445a285370ec0ddac2ede071e447f00b642ac3\",\"license\":\"MIT\"},\"contracts/openzeppelin/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"contracts/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/openzeppelin/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"contracts/openzeppelin/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"contracts/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/openzeppelin/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf98cb1651a90d20ef77d8c1dd10d5fce4954e747603e5672a8292bd4368120dd\",\"license\":\"MIT\"},\"contracts/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/openzeppelin/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"contracts/openzeppelin/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\",\"keccak256\":\"0x0969c3b761eb3af95a44d2c5b89822572d87441f2ca64d9fa80d7cbab667e42b\",\"license\":\"MIT\"},\"contracts/openzeppelin/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xf09ac5164ff53811c21c1a05f01ca2b1c91edace33903c767d432b68d92dc587\",\"license\":\"MIT\"},\"contracts/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\",\"keccak256\":\"0xb4b606ff5dbb4e6e0634a5171f5d2565a19a6e4776adb9116c007e99508eb7f8\",\"license\":\"MIT\"},\"contracts/refs/CoreRef.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ICoreRef.sol\\\";\\nimport \\\"../openzeppelin/security/Pausable.sol\\\";\\n\\n/// @title A Reference to Core\\n/// @author Fei Protocol\\n/// @notice defines some modifiers and utilities around interacting with Core\\nabstract contract CoreRef is ICoreRef, Pausable {\\n    ICore private _core;\\n\\n    /// @notice a role used with a subset of governor permissions for this contract only\\n    bytes32 public override CONTRACT_ADMIN_ROLE;\\n\\n    /// @notice boolean to check whether or not the contract has been initialized.\\n    /// cannot be initialized twice.\\n    bool private _initialized;\\n\\n    constructor(address coreAddress) {\\n        _initialize(coreAddress);\\n    }\\n\\n    /// @notice CoreRef constructor\\n    /// @param coreAddress Fei Core to reference\\n    function _initialize(address coreAddress) internal {\\n        require(!_initialized, \\\"CoreRef: already initialized\\\");\\n        _initialized = true;\\n\\n        _core = ICore(coreAddress);\\n        _setContractAdminRole(_core.GOVERN_ROLE());\\n    }\\n\\n    modifier ifMinterSelf() {\\n        if (_core.isMinter(address(this))) {\\n            _;\\n        }\\n    }\\n\\n    modifier onlyMinter() {\\n        require(_core.isMinter(msg.sender), \\\"CoreRef: Caller is not a minter\\\");\\n        _;\\n    }\\n\\n    modifier onlyBurner() {\\n        require(_core.isBurner(msg.sender), \\\"CoreRef: Caller is not a burner\\\");\\n        _;\\n    }\\n\\n    modifier onlyPCVController() {\\n        require(\\n            _core.isPCVController(msg.sender),\\n            \\\"CoreRef: Caller is not a PCV controller\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGovernorOrAdmin() {\\n        require(\\n            _core.isGovernor(msg.sender) ||\\n            isContractAdmin(msg.sender),\\n            \\\"CoreRef: Caller is not a governor or contract admin\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender),\\n            \\\"CoreRef: Caller is not a governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardianOrGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender) || \\n            _core.isGuardian(msg.sender),\\n            \\\"CoreRef: Caller is not a guardian or governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyFei() {\\n        require(msg.sender == address(fei()), \\\"CoreRef: Caller is not FEI\\\");\\n        _;\\n    }\\n\\n    /// @notice set new Core reference address\\n    /// @param newCore the new core address\\n    function setCore(address newCore) external override onlyGovernor {\\n        require(newCore != address(0), \\\"CoreRef: zero address\\\");\\n        address oldCore = address(_core);\\n        _core = ICore(newCore);\\n        emit CoreUpdate(oldCore, newCore);\\n    }\\n\\n    /// @notice sets a new admin role for this contract\\n    function setContractAdminRole(bytes32 newContractAdminRole) external override onlyGovernor {\\n        _setContractAdminRole(newContractAdminRole);\\n    }\\n\\n    /// @notice returns whether a given address has the admin role for this contract\\n    function isContractAdmin(address _admin) public view override returns (bool) {\\n        return _core.hasRole(CONTRACT_ADMIN_ROLE, _admin);\\n    }\\n\\n    /// @notice set pausable methods to paused\\n    function pause() public override onlyGuardianOrGovernor {\\n        _pause();\\n    }\\n\\n    /// @notice set pausable methods to unpaused\\n    function unpause() public override onlyGuardianOrGovernor {\\n        _unpause();\\n    }\\n\\n    /// @notice address of the Core contract referenced\\n    /// @return ICore implementation address\\n    function core() public view override returns (ICore) {\\n        return _core;\\n    }\\n\\n    /// @notice address of the Fei contract referenced by Core\\n    /// @return IFei implementation address\\n    function fei() public view override returns (IFei) {\\n        return _core.fei();\\n    }\\n\\n    /// @notice address of the Tribe contract referenced by Core\\n    /// @return IERC20 implementation address\\n    function tribe() public view override returns (IERC20) {\\n        return _core.tribe();\\n    }\\n\\n    /// @notice fei balance of contract\\n    /// @return fei amount held\\n    function feiBalance() public view override returns (uint256) {\\n        return fei().balanceOf(address(this));\\n    }\\n\\n    /// @notice tribe balance of contract\\n    /// @return tribe amount held\\n    function tribeBalance() public view override returns (uint256) {\\n        return tribe().balanceOf(address(this));\\n    }\\n\\n    function _burnFeiHeld() internal {\\n        fei().burn(feiBalance());\\n    }\\n\\n    function _mintFei(uint256 amount) internal {\\n        fei().mint(address(this), amount);\\n    }\\n\\n    function _setContractAdminRole(bytes32 newContractAdminRole) internal {\\n        bytes32 oldContractAdminRole = CONTRACT_ADMIN_ROLE;\\n        CONTRACT_ADMIN_ROLE = newContractAdminRole;\\n        emit ContractAdminRoleUpdate(oldContractAdminRole, newContractAdminRole);\\n    }\\n}\\n\",\"keccak256\":\"0xa41e8e6900515e45e8c9cee402ff7e947c6d2b1e155f7ff4cb9f381da2db8e88\",\"license\":\"GPL-3.0-or-later\"},\"contracts/refs/ICoreRef.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/ICore.sol\\\";\\n\\n/// @title CoreRef interface\\n/// @author Fei Protocol\\ninterface ICoreRef {\\n    // ----------- Events -----------\\n\\n    event CoreUpdate(address indexed oldCore, address indexed newCore);\\n\\n    event ContractAdminRoleUpdate(bytes32 indexed oldContractAdminRole, bytes32 indexed newContractAdminRole);\\n\\n    // ----------- Governor only state changing api -----------\\n\\n    function setCore(address newCore) external;\\n\\n    function setContractAdminRole(bytes32 newContractAdminRole) external;\\n\\n    // ----------- Governor or Guardian only state changing api -----------\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // ----------- Getters -----------\\n\\n    function core() external view returns (ICore);\\n\\n    function fei() external view returns (IFei);\\n\\n    function tribe() external view returns (IERC20);\\n\\n    function feiBalance() external view returns (uint256);\\n\\n    function tribeBalance() external view returns (uint256);\\n\\n    function CONTRACT_ADMIN_ROLE() external view returns (bytes32);\\n\\n    function isContractAdmin(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x45894bf79189b48361cb2319377f7915f2c843af14b6c9a3120843d43d475a5a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/token/Fei.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"../openzeppelin/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"./IIncentive.sol\\\";\\nimport \\\"../refs/CoreRef.sol\\\";\\n\\n/// @title FEI stablecoin\\n/// @author Fei Protocol\\ncontract Fei is IFei, ERC20Burnable, CoreRef {\\n    \\n    /// @notice get associated incentive contract, 0 address if N/A\\n    mapping(address => address) public override incentiveContract;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice Fei token constructor\\n    /// @param core Fei Core address to reference\\n    constructor(address core) ERC20(\\\"Fei USD\\\", \\\"FEI\\\") CoreRef(core) {\\n        uint256 chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name())),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @param account the account to incentivize\\n    /// @param incentive the associated incentive contract\\n    function setIncentiveContract(address account, address incentive)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        incentiveContract[account] = incentive;\\n        emit IncentiveContractUpdate(account, incentive);\\n    }\\n\\n    /// @notice mint FEI tokens\\n    /// @param account the account to mint to\\n    /// @param amount the amount to mint\\n    function mint(address account, uint256 amount)\\n        external\\n        override\\n        onlyMinter\\n        whenNotPaused\\n    {\\n        _mint(account, amount);\\n        emit Minting(account, msg.sender, amount);\\n    }\\n\\n    /// @notice burn FEI tokens from caller\\n    /// @param amount the amount to burn\\n    function burn(uint256 amount) public override(IFei, ERC20Burnable) {\\n        super.burn(amount);\\n        emit Burning(msg.sender, msg.sender, amount);\\n    }\\n\\n    /// @notice burn FEI tokens from specified account\\n    /// @param account the account to burn from\\n    /// @param amount the amount to burn\\n    function burnFrom(address account, uint256 amount)\\n        public\\n        override(IFei, ERC20Burnable)\\n        onlyBurner\\n        whenNotPaused\\n    {\\n        _burn(account, amount);\\n        emit Burning(account, msg.sender, amount);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal override {\\n        super._transfer(sender, recipient, amount);\\n        _checkAndApplyIncentives(sender, recipient, amount);\\n    }\\n\\n    function _checkAndApplyIncentives(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        // incentive on sender\\n        address senderIncentive = incentiveContract[sender];\\n        if (senderIncentive != address(0)) {\\n            IIncentive(senderIncentive).incentivize(\\n                sender,\\n                recipient,\\n                msg.sender,\\n                amount\\n            );\\n        }\\n\\n        // incentive on recipient\\n        address recipientIncentive = incentiveContract[recipient];\\n        if (recipientIncentive != address(0)) {\\n            IIncentive(recipientIncentive).incentivize(\\n                sender,\\n                recipient,\\n                msg.sender,\\n                amount\\n            );\\n        }\\n\\n        // incentive on operator\\n        address operatorIncentive = incentiveContract[msg.sender];\\n        if (\\n            msg.sender != sender &&\\n            msg.sender != recipient &&\\n            operatorIncentive != address(0)\\n        ) {\\n            IIncentive(operatorIncentive).incentivize(\\n                sender,\\n                recipient,\\n                msg.sender,\\n                amount\\n            );\\n        }\\n\\n        // all incentive, if active applies to every transfer\\n        address allIncentive = incentiveContract[address(0)];\\n        if (allIncentive != address(0)) {\\n            IIncentive(allIncentive).incentivize(\\n                sender,\\n                recipient,\\n                msg.sender,\\n                amount\\n            );\\n        }\\n    }\\n\\n    /// @notice permit spending of FEI\\n    /// @param owner the FEI holder\\n    /// @param spender the approved operator\\n    /// @param value the amount approved\\n    /// @param deadline the deadline after which the approval is no longer valid\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(deadline >= block.timestamp, \\\"Fei: EXPIRED\\\");\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(\\n                        abi.encode(\\n                            PERMIT_TYPEHASH,\\n                            owner,\\n                            spender,\\n                            value,\\n                            nonces[owner]++,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"Fei: INVALID_SIGNATURE\\\"\\n        );\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x69cec9e1295552a230c4ca5223754930328901f56c74e61bdcf068de005391b6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/token/IFei.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"../openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n\\n/// @title FEI stablecoin interface\\n/// @author Fei Protocol\\ninterface IFei is IERC20 {\\n    // ----------- Events -----------\\n\\n    event Minting(\\n        address indexed _to,\\n        address indexed _minter,\\n        uint256 _amount\\n    );\\n\\n    event Burning(\\n        address indexed _to,\\n        address indexed _burner,\\n        uint256 _amount\\n    );\\n\\n    event IncentiveContractUpdate(\\n        address indexed _incentivized,\\n        address indexed _incentiveContract\\n    );\\n\\n    // ----------- State changing api -----------\\n\\n    function burn(uint256 amount) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // ----------- Burner only state changing api -----------\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    // ----------- Minter only state changing api -----------\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    // ----------- Governor only state changing api -----------\\n\\n    function setIncentiveContract(address account, address incentive) external;\\n\\n    // ----------- Getters -----------\\n\\n    function incentiveContract(address account) external view returns (address);\\n}\\n\",\"keccak256\":\"0xa74b37fec6784a4bdb45c84aac0ebe6de4ec7fc8a93fb4eb197846da584a2da4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/token/IIncentive.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\n/// @title incentive contract interface\\n/// @author Fei Protocol\\n/// @notice Called by FEI token contract when transferring with an incentivized address\\n/// @dev should be appointed as a Minter or Burner as needed\\ninterface IIncentive {\\n    // ----------- Fei only state changing api -----------\\n\\n    /// @notice apply incentives on transfer\\n    /// @param sender the sender address of the FEI\\n    /// @param receiver the receiver address of the FEI\\n    /// @param operator the operator (msg.sender) of the transfer\\n    /// @param amount the amount of FEI transferred\\n    function incentivize(\\n        address sender,\\n        address receiver,\\n        address operator,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf91987ae37d788bb41f1cbac63acc67cff1060c0544bf1ad2760275f2a924e6b\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d306200012a565b620000587f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660008051602062001b3183398151915262000148565b620000937f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84860008051602062001b3183398151915262000148565b620000ce7f0866eae1216ed05a11636a648003f3f62921eb97ccb05acc30636f62958a8bd660008051602062001b3183398151915262000148565b620000e960008051602062001b318339815191528062000148565b620001247f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504160008051602062001b3183398151915262000148565b620002f8565b6200014560008051602062001b318339815191528262000193565b50565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b620001aa8282620001d660201b62000d4c1760201c565b6000828152600160209081526040909120620001d191839062000d56620001e6821b17901c565b505050565b620001e2828262000206565b5050565b6000620001fd836001600160a01b038416620002a6565b90505b92915050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001e2576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002623390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054620002ef5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000200565b50600062000200565b61182980620003086000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80639010d07c11610130578063c1ef303a116100b8578063e0a200461161007c578063e0a20046146104dc578063e43581b8146104f1578063e6eb982f14610504578063eacdd9e814610517578063f09a40161461052a57600080fd5b8063c1ef303a1461047b578063ca15c8731461048e578063cfbd4885146104a1578063d5391393146104b4578063d547741f146104c957600080fd5b8063a217fddf116100ff578063a217fddf14610427578063aa271e1a1461042f578063af648c3d14610442578063b86677fe14610455578063b9022dc01461046857600080fd5b80639010d07c146103bd57806391d14854146103e857806394b1d2c0146103fb5780639a9ba4da1461040e57600080fd5b80632f2ff15d116101b35780634334614a116101825780634334614a1461035e5780634c9f9384146103715780635f06d761146103845780636186943e146103975780638dd92276146103aa57600080fd5b80632f2ff15d1461031057806336568abe1461032357806338b7f44614610336578063395c62e81461034b57600080fd5b806310511f96116101fa57806310511f961461028f578063248a9ca3146102a257806324ea54f4146102d3578063261707fa146102e8578063282c51f3146102fb57600080fd5b806301ffc9a71461022c578063080bf57c146102545780630900cc33146102695780630c68ba211461027c575b600080fd5b61023f61023a36600461157b565b61053d565b60405190151581526020015b60405180910390f35b610267610262366004611538565b610568565b005b61026761027736600461148b565b6106a7565b61023f61028a36600461148b565b6106e7565b61026761029d36600461148b565b610701565b6102c56102b0366004611520565b60009081526020819052604090206001015490565b60405190815260200161024b565b6102c56000805160206117d483398151915281565b6102676102f636600461148b565b61073e565b6102c560008051602061175483398151915281565b61026761031e366004611538565b610777565b610267610331366004611538565b61079e565b6102c560008051602061177483398151915281565b61026761035936600461148b565b6107c0565b61023f61036c36600461148b565b6107fd565b61026761037f36600461155a565b610817565b61026761039236600461148b565b61084a565b61023f6103a536600461148b565b610878565b6102676103b836600461148b565b610892565b6103d06103cb36600461155a565b6108cf565b6040516001600160a01b03909116815260200161024b565b61023f6103f6366004611538565b6108ee565b61026761040936600461148b565b610917565b6002546103d0906201000090046001600160a01b031681565b6102c5600081565b61023f61043d36600461148b565b610954565b61026761045036600461148b565b61096e565b6003546103d0906001600160a01b031681565b61026761047636600461148b565b6109ab565b61026761048936600461148b565b6109d9565b6102c561049c366004611520565b610a16565b6102676104af36600461148b565b610a2d565b6102c560008051602061179483398151915281565b6102676104d7366004611538565b610a66565b6102c56000805160206117b483398151915281565b61023f6104ff36600461148b565b610a70565b61026761051236600461148b565b610a8a565b6102676105253660046114d7565b610ac7565b6102676105383660046114a5565b610c7d565b60006001600160e01b03198216635a05180f60e01b1480610562575061056282610d6b565b92915050565b610571336106e7565b6105d05760405162461bcd60e51b815260206004820152602560248201527f5065726d697373696f6e733a2043616c6c6572206973206e6f74206120677561604482015264393234b0b760d91b60648201526084015b60405180910390fd5b6000805160206117748339815191528214156106435760405162461bcd60e51b815260206004820152602c60248201527f5065726d697373696f6e733a20477561726469616e2063616e6e6f742072657660448201526b37b5b29033b7bb32b93737b960a11b60648201526084016105c7565b60405163d547741f60e01b8152600481018390526001600160a01b0382166024820152309063d547741f90604401600060405180830381600087803b15801561068b57600080fd5b505af115801561069f573d6000803e3d6000fd5b505050505050565b6106b033610a70565b6106cc5760405162461bcd60e51b81526004016105c790611663565b6106e460008051602061175483398151915282610a66565b50565b60006105626000805160206117d4833981519152836108ee565b61070a33610a70565b6107265760405162461bcd60e51b81526004016105c790611663565b6106e460008051602061175483398151915282610777565b61074733610a70565b6107635760405162461bcd60e51b81526004016105c790611663565b6106e4600080516020611794833981519152825b6107818282610da0565b60008281526001602052604090206107999082610d56565b505050565b6107a88282610dc6565b60008281526001602052604090206107999082610e40565b6107c933610a70565b6107e55760405162461bcd60e51b81526004016105c790611663565b6106e460008051602061177483398151915282610777565b6000610562600080516020611754833981519152836108ee565b61082033610a70565b61083c5760405162461bcd60e51b81526004016105c790611663565b6108468282610e55565b5050565b61085333610a70565b61086f5760405162461bcd60e51b81526004016105c790611663565b6106e481610ea0565b60006105626000805160206117b4833981519152836108ee565b61089b33610a70565b6108b75760405162461bcd60e51b81526004016105c790611663565b6106e46000805160206117b483398151915282610a66565b60008281526001602052604081206108e79083610ef4565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61092033610a70565b61093c5760405162461bcd60e51b81526004016105c790611663565b6106e46000805160206117d483398151915282610777565b6000610562600080516020611794833981519152836108ee565b61097733610a70565b6109935760405162461bcd60e51b81526004016105c790611663565b6106e46000805160206117d483398151915282610a66565b6109b433610a70565b6109d05760405162461bcd60e51b81526004016105c790611663565b6106e481610f00565b6109e233610a70565b6109fe5760405162461bcd60e51b81526004016105c790611663565b6106e46000805160206117b483398151915282610777565b600081815260016020526040812061056290610f4a565b610a3633610a70565b610a525760405162461bcd60e51b81526004016105c790611663565b6106e4600080516020611794833981519152825b6107a88282610f54565b6000610562600080516020611774833981519152836108ee565b610a9333610a70565b610aaf5760405162461bcd60e51b81526004016105c790611663565b6106e460008051602061177483398151915282610a66565b610ad033610a70565b610aec5760405162461bcd60e51b81526004016105c790611663565b6003546040516370a0823160e01b81523060048201526001600160a01b0390911690829082906370a082319060240160206040518083038186803b158015610b3357600080fd5b505afa158015610b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6b91906115a3565b1015610bb25760405162461bcd60e51b8152602060048201526016602482015275436f72653a204e6f7420656e6f75676820547269626560501b60448201526064016105c7565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905282169063a9059cbb90604401602060405180830381600087803b158015610bfc57600080fd5b505af1158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190611500565b50826001600160a01b03167ffd90a2bc2c0c3cf07693529b256c4173a944fe9f55c1984c09a10a1ad28c116483604051610c7091815260200190565b60405180910390a2505050565b600254610100900460ff1680610c96575060025460ff16155b610cf95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105c7565b600254610100900460ff16158015610d1b576002805461ffff19166101011790555b610d2433610f7a565b610d2d83610ea0565b610d3682610f00565b8015610799576002805461ff0019169055505050565b6108468282610f92565b60006108e7836001600160a01b038416611016565b60006001600160e01b03198216637965db0b60e01b148061056257506301ffc9a760e01b6001600160e01b0319831614610562565b600082815260208190526040902060010154610dbc8133611065565b6107998383610f92565b6001600160a01b0381163314610e365760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105c7565b61084682826110c9565b60006108e7836001600160a01b03841661112e565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6002805462010000600160b01b031916620100006001600160a01b038416908102919091179091556040517fb382b2a2d84e1d7542e0d58950e00d33ddc7a4b379a265768bf3e8640dde4ef190600090a250565b60006108e7838361124b565b600380546001600160a01b0319166001600160a01b0383169081179091556040517f9675664499c8d4f09c5268d1696ba833416ed56d870558fa7a722bb8aff5d90f90600090a250565b6000610562825490565b600082815260208190526040902060010154610f708133611065565b61079983836110c9565b6106e460008051602061177483398151915282611283565b610f9c82826108ee565b610846576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610fd23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205461105d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610562565b506000610562565b61106f82826108ee565b61084657611087816001600160a01b0316601461128d565b61109283602061128d565b6040516020016110a39291906115bb565b60408051601f198184030181529082905262461bcd60e51b82526105c791600401611630565b6110d382826108ee565b15610846576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815260018301602052604081205480156112415760006111526001836116df565b8554909150600090611166906001906116df565b90508181146111e757600086600001828154811061119457634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106111c557634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061120657634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610562565b6000915050610562565b600082600001828154811061127057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6107818282610d4c565b6060600061129c8360026116c0565b6112a79060026116a8565b67ffffffffffffffff8111156112cd57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156112f7576020820181803683370190505b509050600360fc1b8160008151811061132057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061135d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006113818460026116c0565b61138c9060016116a8565b90505b6001811115611420576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106113ce57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106113f257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361141981611726565b905061138f565b5083156108e75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105c7565b80356001600160a01b038116811461148657600080fd5b919050565b60006020828403121561149c578081fd5b6108e78261146f565b600080604083850312156114b7578081fd5b6114c08361146f565b91506114ce6020840161146f565b90509250929050565b600080604083850312156114e9578182fd5b6114f28361146f565b946020939093013593505050565b600060208284031215611511578081fd5b815180151581146108e7578182fd5b600060208284031215611531578081fd5b5035919050565b6000806040838503121561154a578182fd5b823591506114ce6020840161146f565b6000806040838503121561156c578182fd5b50508035926020909101359150565b60006020828403121561158c578081fd5b81356001600160e01b0319811681146108e7578182fd5b6000602082840312156115b4578081fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516115f38160178501602088016116f6565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516116248160288401602088016116f6565b01602801949350505050565b602081526000825180602084015261164f8160408501602087016116f6565b601f01601f19169190910160400192915050565b60208082526025908201527f5065726d697373696f6e733a2043616c6c6572206973206e6f74206120676f7660408201526432b93737b960d91b606082015260800190565b600082198211156116bb576116bb61173d565b500190565b60008160001904831182151516156116da576116da61173d565b500290565b6000828210156116f1576116f161173d565b500390565b60005b838110156117115781810151838201526020016116f9565b83811115611720576000848401525b50505050565b6000816117355761173561173d565b506000190190565b634e487b7160e01b600052601160045260246000fdfe3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848899bd46557473cb80307a9dabc297131ced39608330a2d29b2d52b660c03923e9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a60866eae1216ed05a11636a648003f3f62921eb97ccb05acc30636f62958a8bd655435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041a2646970667358221220c9753ee3ca82fa229803a7d383a9760f955c3d40cf2b6be9c66a9de8d2eb1b5664736f6c63430008040033899bd46557473cb80307a9dabc297131ced39608330a2d29b2d52b660c03923e",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c80639010d07c11610130578063c1ef303a116100b8578063e0a200461161007c578063e0a20046146104dc578063e43581b8146104f1578063e6eb982f14610504578063eacdd9e814610517578063f09a40161461052a57600080fd5b8063c1ef303a1461047b578063ca15c8731461048e578063cfbd4885146104a1578063d5391393146104b4578063d547741f146104c957600080fd5b8063a217fddf116100ff578063a217fddf14610427578063aa271e1a1461042f578063af648c3d14610442578063b86677fe14610455578063b9022dc01461046857600080fd5b80639010d07c146103bd57806391d14854146103e857806394b1d2c0146103fb5780639a9ba4da1461040e57600080fd5b80632f2ff15d116101b35780634334614a116101825780634334614a1461035e5780634c9f9384146103715780635f06d761146103845780636186943e146103975780638dd92276146103aa57600080fd5b80632f2ff15d1461031057806336568abe1461032357806338b7f44614610336578063395c62e81461034b57600080fd5b806310511f96116101fa57806310511f961461028f578063248a9ca3146102a257806324ea54f4146102d3578063261707fa146102e8578063282c51f3146102fb57600080fd5b806301ffc9a71461022c578063080bf57c146102545780630900cc33146102695780630c68ba211461027c575b600080fd5b61023f61023a36600461157b565b61053d565b60405190151581526020015b60405180910390f35b610267610262366004611538565b610568565b005b61026761027736600461148b565b6106a7565b61023f61028a36600461148b565b6106e7565b61026761029d36600461148b565b610701565b6102c56102b0366004611520565b60009081526020819052604090206001015490565b60405190815260200161024b565b6102c56000805160206117d483398151915281565b6102676102f636600461148b565b61073e565b6102c560008051602061175483398151915281565b61026761031e366004611538565b610777565b610267610331366004611538565b61079e565b6102c560008051602061177483398151915281565b61026761035936600461148b565b6107c0565b61023f61036c36600461148b565b6107fd565b61026761037f36600461155a565b610817565b61026761039236600461148b565b61084a565b61023f6103a536600461148b565b610878565b6102676103b836600461148b565b610892565b6103d06103cb36600461155a565b6108cf565b6040516001600160a01b03909116815260200161024b565b61023f6103f6366004611538565b6108ee565b61026761040936600461148b565b610917565b6002546103d0906201000090046001600160a01b031681565b6102c5600081565b61023f61043d36600461148b565b610954565b61026761045036600461148b565b61096e565b6003546103d0906001600160a01b031681565b61026761047636600461148b565b6109ab565b61026761048936600461148b565b6109d9565b6102c561049c366004611520565b610a16565b6102676104af36600461148b565b610a2d565b6102c560008051602061179483398151915281565b6102676104d7366004611538565b610a66565b6102c56000805160206117b483398151915281565b61023f6104ff36600461148b565b610a70565b61026761051236600461148b565b610a8a565b6102676105253660046114d7565b610ac7565b6102676105383660046114a5565b610c7d565b60006001600160e01b03198216635a05180f60e01b1480610562575061056282610d6b565b92915050565b610571336106e7565b6105d05760405162461bcd60e51b815260206004820152602560248201527f5065726d697373696f6e733a2043616c6c6572206973206e6f74206120677561604482015264393234b0b760d91b60648201526084015b60405180910390fd5b6000805160206117748339815191528214156106435760405162461bcd60e51b815260206004820152602c60248201527f5065726d697373696f6e733a20477561726469616e2063616e6e6f742072657660448201526b37b5b29033b7bb32b93737b960a11b60648201526084016105c7565b60405163d547741f60e01b8152600481018390526001600160a01b0382166024820152309063d547741f90604401600060405180830381600087803b15801561068b57600080fd5b505af115801561069f573d6000803e3d6000fd5b505050505050565b6106b033610a70565b6106cc5760405162461bcd60e51b81526004016105c790611663565b6106e460008051602061175483398151915282610a66565b50565b60006105626000805160206117d4833981519152836108ee565b61070a33610a70565b6107265760405162461bcd60e51b81526004016105c790611663565b6106e460008051602061175483398151915282610777565b61074733610a70565b6107635760405162461bcd60e51b81526004016105c790611663565b6106e4600080516020611794833981519152825b6107818282610da0565b60008281526001602052604090206107999082610d56565b505050565b6107a88282610dc6565b60008281526001602052604090206107999082610e40565b6107c933610a70565b6107e55760405162461bcd60e51b81526004016105c790611663565b6106e460008051602061177483398151915282610777565b6000610562600080516020611754833981519152836108ee565b61082033610a70565b61083c5760405162461bcd60e51b81526004016105c790611663565b6108468282610e55565b5050565b61085333610a70565b61086f5760405162461bcd60e51b81526004016105c790611663565b6106e481610ea0565b60006105626000805160206117b4833981519152836108ee565b61089b33610a70565b6108b75760405162461bcd60e51b81526004016105c790611663565b6106e46000805160206117b483398151915282610a66565b60008281526001602052604081206108e79083610ef4565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61092033610a70565b61093c5760405162461bcd60e51b81526004016105c790611663565b6106e46000805160206117d483398151915282610777565b6000610562600080516020611794833981519152836108ee565b61097733610a70565b6109935760405162461bcd60e51b81526004016105c790611663565b6106e46000805160206117d483398151915282610a66565b6109b433610a70565b6109d05760405162461bcd60e51b81526004016105c790611663565b6106e481610f00565b6109e233610a70565b6109fe5760405162461bcd60e51b81526004016105c790611663565b6106e46000805160206117b483398151915282610777565b600081815260016020526040812061056290610f4a565b610a3633610a70565b610a525760405162461bcd60e51b81526004016105c790611663565b6106e4600080516020611794833981519152825b6107a88282610f54565b6000610562600080516020611774833981519152836108ee565b610a9333610a70565b610aaf5760405162461bcd60e51b81526004016105c790611663565b6106e460008051602061177483398151915282610a66565b610ad033610a70565b610aec5760405162461bcd60e51b81526004016105c790611663565b6003546040516370a0823160e01b81523060048201526001600160a01b0390911690829082906370a082319060240160206040518083038186803b158015610b3357600080fd5b505afa158015610b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6b91906115a3565b1015610bb25760405162461bcd60e51b8152602060048201526016602482015275436f72653a204e6f7420656e6f75676820547269626560501b60448201526064016105c7565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905282169063a9059cbb90604401602060405180830381600087803b158015610bfc57600080fd5b505af1158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190611500565b50826001600160a01b03167ffd90a2bc2c0c3cf07693529b256c4173a944fe9f55c1984c09a10a1ad28c116483604051610c7091815260200190565b60405180910390a2505050565b600254610100900460ff1680610c96575060025460ff16155b610cf95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105c7565b600254610100900460ff16158015610d1b576002805461ffff19166101011790555b610d2433610f7a565b610d2d83610ea0565b610d3682610f00565b8015610799576002805461ff0019169055505050565b6108468282610f92565b60006108e7836001600160a01b038416611016565b60006001600160e01b03198216637965db0b60e01b148061056257506301ffc9a760e01b6001600160e01b0319831614610562565b600082815260208190526040902060010154610dbc8133611065565b6107998383610f92565b6001600160a01b0381163314610e365760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105c7565b61084682826110c9565b60006108e7836001600160a01b03841661112e565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6002805462010000600160b01b031916620100006001600160a01b038416908102919091179091556040517fb382b2a2d84e1d7542e0d58950e00d33ddc7a4b379a265768bf3e8640dde4ef190600090a250565b60006108e7838361124b565b600380546001600160a01b0319166001600160a01b0383169081179091556040517f9675664499c8d4f09c5268d1696ba833416ed56d870558fa7a722bb8aff5d90f90600090a250565b6000610562825490565b600082815260208190526040902060010154610f708133611065565b61079983836110c9565b6106e460008051602061177483398151915282611283565b610f9c82826108ee565b610846576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610fd23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205461105d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610562565b506000610562565b61106f82826108ee565b61084657611087816001600160a01b0316601461128d565b61109283602061128d565b6040516020016110a39291906115bb565b60408051601f198184030181529082905262461bcd60e51b82526105c791600401611630565b6110d382826108ee565b15610846576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815260018301602052604081205480156112415760006111526001836116df565b8554909150600090611166906001906116df565b90508181146111e757600086600001828154811061119457634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106111c557634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061120657634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610562565b6000915050610562565b600082600001828154811061127057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6107818282610d4c565b6060600061129c8360026116c0565b6112a79060026116a8565b67ffffffffffffffff8111156112cd57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156112f7576020820181803683370190505b509050600360fc1b8160008151811061132057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061135d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006113818460026116c0565b61138c9060016116a8565b90505b6001811115611420576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106113ce57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106113f257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361141981611726565b905061138f565b5083156108e75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105c7565b80356001600160a01b038116811461148657600080fd5b919050565b60006020828403121561149c578081fd5b6108e78261146f565b600080604083850312156114b7578081fd5b6114c08361146f565b91506114ce6020840161146f565b90509250929050565b600080604083850312156114e9578182fd5b6114f28361146f565b946020939093013593505050565b600060208284031215611511578081fd5b815180151581146108e7578182fd5b600060208284031215611531578081fd5b5035919050565b6000806040838503121561154a578182fd5b823591506114ce6020840161146f565b6000806040838503121561156c578182fd5b50508035926020909101359150565b60006020828403121561158c578081fd5b81356001600160e01b0319811681146108e7578182fd5b6000602082840312156115b4578081fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516115f38160178501602088016116f6565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516116248160288401602088016116f6565b01602801949350505050565b602081526000825180602084015261164f8160408501602087016116f6565b601f01601f19169190910160400192915050565b60208082526025908201527f5065726d697373696f6e733a2043616c6c6572206973206e6f74206120676f7660408201526432b93737b960d91b606082015260800190565b600082198211156116bb576116bb61173d565b500190565b60008160001904831182151516156116da576116da61173d565b500290565b6000828210156116f1576116f161173d565b500390565b60005b838110156117115781810151838201526020016116f9565b83811115611720576000848401525b50505050565b6000816117355761173561173d565b506000190190565b634e487b7160e01b600052601160045260246000fdfe3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848899bd46557473cb80307a9dabc297131ced39608330a2d29b2d52b660c03923e9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a60866eae1216ed05a11636a648003f3f62921eb97ccb05acc30636f62958a8bd655435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a5041a2646970667358221220c9753ee3ca82fa229803a7d383a9760f955c3d40cf2b6be9c66a9de8d2eb1b5664736f6c63430008040033",
  "devdoc": {
    "author": "Fei Protocol",
    "kind": "dev",
    "methods": {
      "allocateTribe(address,uint256)": {
        "params": {
          "amount": "the amount of TRIBE to send",
          "to": "the address to send TRIBE to"
        }
      },
      "createRole(bytes32,bytes32)": {
        "details": "can also be used to update admin of existing role",
        "params": {
          "adminRole": "the admin role id for `role`",
          "role": "the new role id"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantBurner(address)": {
        "params": {
          "burner": "new burner"
        }
      },
      "grantGovernor(address)": {
        "params": {
          "governor": "new governor"
        }
      },
      "grantGuardian(address)": {
        "params": {
          "guardian": "new guardian"
        }
      },
      "grantMinter(address)": {
        "params": {
          "minter": "new minter"
        }
      },
      "grantPCVController(address)": {
        "params": {
          "pcvController": "new controller"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isBurner(address)": {
        "params": {
          "_address": "address to check"
        },
        "returns": {
          "_0": "true _address is a burner"
        }
      },
      "isGovernor(address)": {
        "params": {
          "_address": "address to check"
        },
        "returns": {
          "_0": "true _address is a governor"
        }
      },
      "isGuardian(address)": {
        "params": {
          "_address": "address to check"
        },
        "returns": {
          "_0": "true _address is a guardian"
        }
      },
      "isMinter(address)": {
        "params": {
          "_address": "address to check"
        },
        "returns": {
          "_0": "true _address is a minter"
        }
      },
      "isPCVController(address)": {
        "params": {
          "_address": "address to check"
        },
        "returns": {
          "_0": "true _address is a controller"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeBurner(address)": {
        "params": {
          "burner": "ex burner"
        }
      },
      "revokeGovernor(address)": {
        "params": {
          "governor": "ex governor"
        }
      },
      "revokeGuardian(address)": {
        "params": {
          "guardian": "ex guardian"
        }
      },
      "revokeMinter(address)": {
        "params": {
          "minter": "ex minter"
        }
      },
      "revokeOverride(bytes32,address)": {
        "params": {
          "account": "the address to revoke the role from",
          "role": "the role to revoke"
        }
      },
      "revokePCVController(address)": {
        "params": {
          "pcvController": "ex pcvController"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "setFei(address)": {
        "params": {
          "token": "new fei address"
        }
      },
      "setTribe(address)": {
        "params": {
          "token": "new tribe address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "Source of truth for Fei Protocol",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allocateTribe(address,uint256)": {
        "notice": "sends TRIBE tokens from treasury to an address"
      },
      "createRole(bytes32,bytes32)": {
        "notice": "creates a new role to be maintained"
      },
      "fei()": {
        "notice": "the address of the FEI contract"
      },
      "grantBurner(address)": {
        "notice": "grants burner role to address"
      },
      "grantGovernor(address)": {
        "notice": "grants governor role to address"
      },
      "grantGuardian(address)": {
        "notice": "grants guardian role to address"
      },
      "grantMinter(address)": {
        "notice": "grants minter role to address"
      },
      "grantPCVController(address)": {
        "notice": "grants controller role to address"
      },
      "isBurner(address)": {
        "notice": "checks if address is a burner"
      },
      "isGovernor(address)": {
        "notice": "checks if address is a governor"
      },
      "isGuardian(address)": {
        "notice": "checks if address is a guardian"
      },
      "isMinter(address)": {
        "notice": "checks if address is a minter"
      },
      "isPCVController(address)": {
        "notice": "checks if address is a controller"
      },
      "revokeBurner(address)": {
        "notice": "revokes burner role from address"
      },
      "revokeGovernor(address)": {
        "notice": "revokes governor role from address"
      },
      "revokeGuardian(address)": {
        "notice": "revokes guardian role from address"
      },
      "revokeMinter(address)": {
        "notice": "revokes minter role from address"
      },
      "revokeOverride(bytes32,address)": {
        "notice": "revokes a role from address"
      },
      "revokePCVController(address)": {
        "notice": "revokes pcvController role from address"
      },
      "setFei(address)": {
        "notice": "sets Fei address to a new address"
      },
      "setTribe(address)": {
        "notice": "sets Tribe address to a new address"
      },
      "tribe()": {
        "notice": "the address of the TRIBE contract"
      }
    },
    "notice": "maintains roles, access control, fei, tribe, genesisGroup, and the TRIBE treasury",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6151,
        "contract": "contracts/core/Core.sol:Core",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)6146_storage)"
      },
      {
        "astId": 6452,
        "contract": "contracts/core/Core.sol:Core",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)14390_storage)"
      },
      {
        "astId": 9960,
        "contract": "contracts/core/Core.sol:Core",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 9963,
        "contract": "contracts/core/Core.sol:Core",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 997,
        "contract": "contracts/core/Core.sol:Core",
        "label": "fei",
        "offset": 2,
        "slot": "2",
        "type": "t_contract(IFei)20502"
      },
      {
        "astId": 1002,
        "contract": "contracts/core/Core.sol:Core",
        "label": "tribe",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)10716"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)10716": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFei)20502": {
        "encoding": "inplace",
        "label": "contract IFei",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)14390_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)14390_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)6146_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)6146_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)14390_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 14389,
            "contract": "contracts/core/Core.sol:Core",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)14089_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)6146_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 6143,
            "contract": "contracts/core/Core.sol:Core",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6145,
            "contract": "contracts/core/Core.sol:Core",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)14089_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 14084,
            "contract": "contracts/core/Core.sol:Core",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 14088,
            "contract": "contracts/core/Core.sol:Core",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}