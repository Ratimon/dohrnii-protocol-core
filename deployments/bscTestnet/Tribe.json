{
  "address": "0x2C4e0e3f2f8219C78687BC04455d2Df8A0EAa28F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xea89ac24b306169299244f259fc3cd7fea806251af3f8ef09c5cf81a49584b0e",
  "receipt": {
    "to": null,
    "from": "0xd0BE34550AC47e616B7220564605BA00912A5FeF",
    "contractAddress": "0x2C4e0e3f2f8219C78687BC04455d2Df8A0EAa28F",
    "transactionIndex": 4,
    "gasUsed": "1857451",
    "logsBloom": "0x
    "blockHash": "0x69cc8e6c7c2d3e2dd53a197662e9b07ef5b8c7d9fe47e0c6595b70a51b17e301",
    "transactionHash": "0xea89ac24b306169299244f259fc3cd7fea806251af3f8ef09c5cf81a49584b0e",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 12293372,
        "transactionHash": "0xea89ac24b306169299244f259fc3cd7fea806251af3f8ef09c5cf81a49584b0e",
        "address": "0x2C4e0e3f2f8219C78687BC04455d2Df8A0EAa28F",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069c5db71bb6b7de5951765216c1fca66fca4702b"
        ],
        "data": "0x0000000000000000000000000000000000000000033b2e3c9fd0803ce8000000",
        "logIndex": 17,
        "blockHash": "0x69cc8e6c7c2d3e2dd53a197662e9b07ef5b8c7d9fe47e0c6595b70a51b17e301"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 12293372,
        "transactionHash": "0xea89ac24b306169299244f259fc3cd7fea806251af3f8ef09c5cf81a49584b0e",
        "address": "0x2C4e0e3f2f8219C78687BC04455d2Df8A0EAa28F",
        "topics": [
          "0x3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0be34550ac47e616b7220564605ba00912a5fef",
        "logIndex": 18,
        "blockHash": "0x69cc8e6c7c2d3e2dd53a197662e9b07ef5b8c7d9fe47e0c6595b70a51b17e301"
      }
    ],
    "blockNumber": 12293372,
    "cumulativeGasUsed": "2175988",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x69c5db71bb6b7DE5951765216c1FcA66FCA4702b",
    "0xd0BE34550AC47e616B7220564605BA00912A5FeF"
  ],
  "solcInputHash": "40bf4814f819e452510fca27eee9f3cf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"rawAmount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"constructor\":{\"params\":{\"account\":\"The initial account to grant all the tokens\",\"minter_\":\"The account with minting ability\"}},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"getPriorVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"mint(address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to be minted\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"rawAmount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\"}},\"setMinter(address)\":{\"params\":{\"minter_\":\"The address of the new minter\"}},\"transfer(address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"The standard EIP-20 approval event\"},\"DelegateChanged(address,address,address)\":{\"notice\":\"An event thats emitted when an account changes its delegate\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"An event thats emitted when a delegate account's vote balance changes\"},\"MinterChanged(address,address)\":{\"notice\":\"An event thats emitted when the minter address is changed\"},\"Transfer(address,address,uint256)\":{\"notice\":\"The standard EIP-20 transfer event\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the permit struct used by the contract\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkpoints(address,uint32)\":{\"notice\":\"A record of votes checkpoints for each account, by index\"},\"constructor\":{\"notice\":\"Construct a new Tribe token\"},\"decimals()\":{\"notice\":\"EIP-20 token decimals for this token\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from signatory to `delegatee`\"},\"delegates(address)\":{\"notice\":\"A record of each accounts delegate\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"mint(address,uint256)\":{\"notice\":\"Mint new tokens\"},\"minter()\":{\"notice\":\"Address which may mint new tokens\"},\"name()\":{\"notice\":\"EIP-20 token name for this token\"},\"nonces(address)\":{\"notice\":\"A record of states for signing / validating signatures\"},\"numCheckpoints(address)\":{\"notice\":\"The number of checkpoints for each account\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spends\"},\"setMinter(address)\":{\"notice\":\"Change the minter address\"},\"symbol()\":{\"notice\":\"EIP-20 token symbol for this token\"},\"totalSupply()\":{\"notice\":\"Total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dao/Tribe.sol\":\"Tribe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dao/Tribe.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\n// Forked from Uniswap's UNI\\n// Reference: https://etherscan.io/address/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984#code\\n\\ncontract Tribe {\\n    /// @notice EIP-20 token name for this token\\n    // solhint-disable-next-line const-name-snakecase\\n    string public constant name = \\\"Tribe\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    // solhint-disable-next-line const-name-snakecase\\n    string public constant symbol = \\\"TRIBE\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    // solhint-disable-next-line const-name-snakecase\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    // solhint-disable-next-line const-name-snakecase\\n    uint public totalSupply = 1_000_000_000e18; // 1 billion Tribe\\n\\n    /// @notice Address which may mint new tokens\\n    address public minter;\\n\\n    /// @notice Allowance amounts on behalf of others\\n    mapping (address => mapping (address => uint96)) internal allowances;\\n\\n    /// @notice Official record of token balances for each account\\n    mapping (address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping (address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    /// @notice An event thats emitted when the minter address is changed\\n    event MinterChanged(address minter, address newMinter);\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Construct a new Tribe token\\n     * @param account The initial account to grant all the tokens\\n     * @param minter_ The account with minting ability\\n     */\\n    constructor(address account, address minter_) {\\n        balances[account] = uint96(totalSupply);\\n        emit Transfer(address(0), account, totalSupply);\\n        minter = minter_;\\n        emit MinterChanged(address(0), minter);\\n    }\\n\\n    /**\\n     * @notice Change the minter address\\n     * @param minter_ The address of the new minter\\n     */\\n    function setMinter(address minter_) external {\\n        require(msg.sender == minter, \\\"Tribe: only the minter can change the minter address\\\");\\n        emit MinterChanged(minter, minter_);\\n        minter = minter_;\\n    }\\n\\n    /**\\n     * @notice Mint new tokens\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to be minted\\n     */\\n    function mint(address dst, uint rawAmount) external {\\n        require(msg.sender == minter, \\\"Tribe: only the minter can mint\\\");\\n        require(dst != address(0), \\\"Tribe: cannot transfer to the zero address\\\");\\n\\n        // mint the amount\\n        uint96 amount = safe96(rawAmount, \\\"Tribe: amount exceeds 96 bits\\\");\\n        uint96 safeSupply = safe96(totalSupply, \\\"Tribe: totalSupply exceeds 96 bits\\\");\\n        totalSupply = add96(safeSupply, amount, \\\"Tribe: totalSupply exceeds 96 bits\\\");\\n\\n        // transfer the amount to the recipient\\n        balances[dst] = add96(balances[dst], amount, \\\"Tribe: transfer amount overflows\\\");\\n        emit Transfer(address(0), dst, amount);\\n\\n        // move delegates\\n        _moveDelegates(address(0), delegates[dst], amount);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint rawAmount) external returns (bool) {\\n        uint96 amount;\\n        if (rawAmount == type(uint).max) {\\n            amount = type(uint96).max;\\n        } else {\\n            amount = safe96(rawAmount, \\\"Tribe: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spends\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        uint96 amount;\\n        if (rawAmount == type(uint).max) {\\n            amount = type(uint96).max;\\n        } else {\\n            amount = safe96(rawAmount, \\\"Tribe: amount exceeds 96 bits\\\");\\n        }\\n\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"Tribe: invalid signature\\\");\\n        require(signatory == owner, \\\"Tribe: unauthorized\\\");\\n        require(block.timestamp <= deadline, \\\"Tribe: signature expired\\\");\\n\\n        allowances[owner][spender] = amount;\\n\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint rawAmount) external returns (bool) {\\n        uint96 amount = safe96(rawAmount, \\\"Tribe: amount exceeds 96 bits\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(rawAmount, \\\"Tribe: amount exceeds 96 bits\\\");\\n\\n        if (spender != src && spenderAllowance != type(uint96).max) {\\n            uint96 newAllowance = sub96(spenderAllowance, amount, \\\"Tribe: transfer amount exceeds spender allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"Tribe: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"Tribe: invalid nonce\\\");\\n        require(block.timestamp <= expiry, \\\"Tribe: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\\n        require(blockNumber < block.number, \\\"Tribe: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(address src, address dst, uint96 amount) internal {\\n        require(src != address(0), \\\"Tribe: cannot transfer from the zero address\\\");\\n        require(dst != address(0), \\\"Tribe: cannot transfer to the zero address\\\");\\n\\n        balances[src] = sub96(balances[src], amount, \\\"Tribe: transfer amount exceeds balance\\\");\\n        balances[dst] = add96(balances[dst], amount, \\\"Tribe: transfer amount overflows\\\");\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"Tribe: vote amount underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"Tribe: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\n      uint32 blockNumber = safe32(block.number, \\\"Tribe: block number exceeds 32 bits\\\");\\n\\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          numCheckpoints[delegatee] = nCheckpoints + 1;\\n      }\\n\\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal view returns (uint) {\\n        uint256 chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0xd1253880d6182a19ec8fb9544c2de836e795096ac05ae86b07c6d9165bac0521\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040526b033b2e3c9fd0803ce80000006000553480156200002157600080fd5b50604051620020c8380380620020c8833981016040819052620000449162000132565b600080546001600160a01b03841680835260036020908152604080852080546001600160601b0319166001600160601b0390951694909417909355835492519283529092917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3600180546001600160a01b0319166001600160a01b038316908117909155604080516000815260208101929092527f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6910160405180910390a1505062000169565b80516001600160a01b03811681146200012d57600080fd5b919050565b6000806040838503121562000145578182fd5b620001508362000115565b9150620001606020840162000115565b90509250929050565b611f4f80620001796000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063c3cda5201161007c578063c3cda520146103ca578063d505accf146103dd578063dd62ed3e146103f0578063e7a324dc14610432578063f1127ed814610459578063fca3b5aa146104c057600080fd5b806370a0823114610303578063782d6fe1146103355780637ecebe001461036057806395d89b4114610380578063a9059cbb146103a4578063b4b5ea57146103b757600080fd5b806330adf81f1161011557806330adf81f14610236578063313ce5671461025d57806340c10f1914610277578063587cde1e1461028c5780635c19a95c146102b55780636fcfff45146102c857600080fd5b806306fdde031461015d5780630754617214610197578063095ea7b3146101c257806318160ddd146101e557806320606b70146101fc57806323b872dd14610223575b600080fd5b61018160405180604001604052806005815260200164547269626560d81b81525081565b60405161018e9190611cd2565b60405180910390f35b6001546101aa906001600160a01b031681565b6040516001600160a01b03909116815260200161018e565b6101d56101d0366004611c14565b6104d3565b604051901515815260200161018e565b6101ee60005481565b60405190815260200161018e565b6101ee7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6101d5610231366004611b70565b61059f565b6101ee7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610265601281565b60405160ff909116815260200161018e565b61028a610285366004611c14565b6106ec565b005b6101aa61029a366004611b24565b6004602052600090815260409020546001600160a01b031681565b61028a6102c3366004611b24565b6108ec565b6102ee6102d6366004611b24565b60066020526000908152604090205463ffffffff1681565b60405163ffffffff909116815260200161018e565b6101ee610311366004611b24565b6001600160a01b03166000908152600360205260409020546001600160601b031690565b610348610343366004611c14565b6108f9565b6040516001600160601b03909116815260200161018e565b6101ee61036e366004611b24565b60076020526000908152604090205481565b61018160405180604001604052806005815260200164545249424560d81b81525081565b6101d56103b2366004611c14565b610b70565b6103486103c5366004611b24565b610bb7565b61028a6103d8366004611c3d565b610c35565b61028a6103eb366004611bab565b610ee2565b6101ee6103fe366004611b3e565b6001600160a01b0391821660009081526002602090815260408083209390941682529190915220546001600160601b031690565b6101ee7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b61049c610467366004611c94565b600560209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6040805163ffffffff90931683526001600160601b0390911660208301520161018e565b61028a6104ce366004611b24565b6112c6565b6000806000198314156104ee57506001600160601b0361051e565b61051b836040518060400160405280601d8152602001600080516020611efa8339815191528152506113a6565b90505b3360008181526002602090815260408083206001600160a01b0389168085529083529281902080546001600160601b0319166001600160601b03871690811790915590519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a360019150505b92915050565b6001600160a01b038316600090815260026020908152604080832033808552908352818420548251808401909352601d8352600080516020611efa83398151915293830193909352916001600160601b03169083906105ff9086906113a6565b9050866001600160a01b0316836001600160a01b03161415801561062c57506001600160601b0382811614155b156106d45760006106568383604051806060016040528060308152602001611ea4603091396113d5565b6001600160a01b038981166000818152600260209081526040808320948a168084529482529182902080546001600160601b0319166001600160601b0387169081179091559151918252939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b6106df87878361141f565b5060019695505050505050565b6001546001600160a01b0316331461074b5760405162461bcd60e51b815260206004820152601f60248201527f54726962653a206f6e6c7920746865206d696e7465722063616e206d696e740060448201526064015b60405180910390fd5b6001600160a01b0382166107715760405162461bcd60e51b815260040161074290611d25565b60006107a0826040518060400160405280601d8152602001600080516020611efa8339815191528152506113a6565b905060006107c8600054604051806060016040528060228152602001611e82602291396113a6565b90506107ed8183604051806060016040528060228152602001611e8260229139611621565b6001600160601b0390811660009081556001600160a01b0386168152600360209081526040918290205482518084019093528183527f54726962653a207472616e7366657220616d6f756e74206f766572666c6f7773918301919091526108579216908490611621565b6001600160a01b038516600081815260036020908152604080832080546001600160601b0319166001600160601b03968716179055519386168452919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36001600160a01b038085166000908152600460205260408120546108e692168461166e565b50505050565b6108f63382611854565b50565b600043821061094a5760405162461bcd60e51b815260206004820152601960248201527f54726962653a206e6f74207965742064657465726d696e6564000000000000006044820152606401610742565b6001600160a01b03831660009081526006602052604090205463ffffffff1680610978576000915050610599565b6001600160a01b0384166000908152600560205260408120849161099d600185611de8565b63ffffffff90811682526020820192909252604001600020541611610a10576001600160a01b0384166000908152600560205260408120906109e0600184611de8565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b031691506105999050565b6001600160a01b038416600090815260056020908152604080832083805290915290205463ffffffff16831015610a4b576000915050610599565b600080610a59600184611de8565b90505b8163ffffffff168163ffffffff161115610b2b5760006002610a7e8484611de8565b610a889190611db9565b610a929083611de8565b6001600160a01b038816600090815260056020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b031691810191909152919250871415610aff576020015194506105999350505050565b805163ffffffff16871115610b1657819350610b24565b610b21600183611de8565b92505b5050610a5c565b506001600160a01b038516600090815260056020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b600080610ba0836040518060400160405280601d8152602001600080516020611efa8339815191528152506113a6565b9050610bad33858361141f565b5060019392505050565b6001600160a01b03811660009081526006602052604081205463ffffffff1680610be2576000610c2e565b6001600160a01b038316600090815260056020526040812090610c06600184611de8565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b9392505050565b6040805180820182526005815264547269626560d81b60209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527febed0dee75115424b4c6084a9ab165e0c99bcf5a44403d7510e1ad1caeaea50681840152466060820152306080808301919091528351808303909101815260a0820184528051908301207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08301526001600160a01b038a1660e083015261010082018990526101208083018990528451808403909101815261014083019094528351939092019290922061190160f01b6101608401526101628301829052610182830181905290916000906101a20160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015610db5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e135760405162461bcd60e51b815260206004820152601860248201527754726962653a20696e76616c6964207369676e617475726560401b6044820152606401610742565b6001600160a01b0381166000908152600760205260408120805491610e3783611e2d565b919050558914610e805760405162461bcd60e51b815260206004820152601460248201527354726962653a20696e76616c6964206e6f6e636560601b6044820152606401610742565b87421115610ecb5760405162461bcd60e51b8152602060048201526018602482015277151c9a58994e881cda59db985d1d5c9948195e1c1a5c995960421b6044820152606401610742565b610ed5818b611854565b505050505b505050505050565b6000600019861415610efc57506001600160601b03610f2c565b610f29866040518060400160405280601d8152602001600080516020611efa8339815191528152506113a6565b90505b6040805180820182526005815264547269626560d81b60209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527febed0dee75115424b4c6084a9ab165e0c99bcf5a44403d7510e1ad1caeaea50681840152466060820152306080808301919091528351808303909101815260a090910183528051908201206001600160a01b038b166000908152600790925291812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918c918c918c91908661100783611e2d565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e0016040516020818303038152906040528051906020012090506000828260405160200161108692919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff8b169284019290925260608301899052608083018890529092509060019060a0016020604051602081039080840390855afa1580156110f1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661114f5760405162461bcd60e51b815260206004820152601860248201527754726962653a20696e76616c6964207369676e617475726560401b6044820152606401610742565b8b6001600160a01b0316816001600160a01b0316146111a65760405162461bcd60e51b8152602060048201526013602482015272151c9a58994e881d5b985d5d1a1bdc9a5e9959606a1b6044820152606401610742565b884211156111f15760405162461bcd60e51b8152602060048201526018602482015277151c9a58994e881cda59db985d1d5c9948195e1c1a5c995960421b6044820152606401610742565b84600260008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160601b0302191690836001600160601b031602179055508a6001600160a01b03168c6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925876040516112b091906001600160601b0391909116815260200190565b60405180910390a3505050505050505050505050565b6001546001600160a01b0316331461133d5760405162461bcd60e51b815260206004820152603460248201527f54726962653a206f6e6c7920746865206d696e7465722063616e206368616e676044820152736520746865206d696e746572206164647265737360601b6064820152608401610742565b600154604080516001600160a01b03928316815291831660208301527f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6910160405180910390a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b600081600160601b84106113cd5760405162461bcd60e51b81526004016107429190611cd2565b509192915050565b6000836001600160601b0316836001600160601b03161115829061140c5760405162461bcd60e51b81526004016107429190611cd2565b506114178385611e0d565b949350505050565b6001600160a01b03831661148a5760405162461bcd60e51b815260206004820152602c60248201527f54726962653a2063616e6e6f74207472616e736665722066726f6d207468652060448201526b7a65726f206164647265737360a01b6064820152608401610742565b6001600160a01b0382166114b05760405162461bcd60e51b815260040161074290611d25565b6001600160a01b0383166000908152600360209081526040918290205482516060810190935260268084526114fb936001600160601b039092169285929190611ed4908301396113d5565b6001600160a01b03848116600090815260036020908152604080832080546001600160601b0319166001600160601b039687161790559286168252908290205482518084019093528183527f54726962653a207472616e7366657220616d6f756e74206f766572666c6f77739183019190915261157b9216908390611621565b6001600160a01b0383811660008181526003602090815260409182902080546001600160601b0319166001600160601b03968716179055905193851684529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36001600160a01b0380841660009081526004602052604080822054858416835291205461161c9291821691168361166e565b505050565b60008061162e8486611d97565b9050846001600160601b0316816001600160601b0316101583906116655760405162461bcd60e51b81526004016107429190611cd2565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561169957506000816001600160601b0316115b1561161c576001600160a01b0383161561177b576001600160a01b03831660009081526006602052604081205463ffffffff1690816116d9576000611725565b6001600160a01b0385166000908152600560205260408120906116fd600185611de8565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b9050600061176982856040518060400160405280601d81526020017f54726962653a20766f746520616d6f756e7420756e646572666c6f77730000008152506113d5565b9050611777868484846118d8565b5050505b6001600160a01b0382161561161c576001600160a01b03821660009081526006602052604081205463ffffffff1690816117b6576000611802565b6001600160a01b0384166000908152600560205260408120906117da600185611de8565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b9050600061184682856040518060400160405280601c81526020017f54726962653a20766f746520616d6f756e74206f766572666c6f777300000000815250611621565b9050610eda858484846118d8565b6001600160a01b03808316600081815260046020818152604080842080546003845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46108e682848361166e565b60006118fc43604051806060016040528060238152602001611e5f60239139611ad0565b905060008463ffffffff1611801561195657506001600160a01b038516600090815260056020526040812063ffffffff83169161193a600188611de8565b63ffffffff908116825260208201929092526040016000205416145b156119ca576001600160a01b03851660009081526005602052604081208391611980600188611de8565b63ffffffff168152602081019190915260400160002080546001600160601b0392909216600160201b026fffffffffffffffffffffffff0000000019909216919091179055611a7b565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000908152600582528681208b8616825290915294909420925183549451909116600160201b026fffffffffffffffffffffffffffffffff19909416911617919091179055611a4a846001611d6f565b6001600160a01b0386166000908152600660205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160601b038086168252841660208201526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b600081600160201b84106113cd5760405162461bcd60e51b81526004016107429190611cd2565b80356001600160a01b0381168114611b0e57600080fd5b919050565b803560ff81168114611b0e57600080fd5b600060208284031215611b35578081fd5b610c2e82611af7565b60008060408385031215611b50578081fd5b611b5983611af7565b9150611b6760208401611af7565b90509250929050565b600080600060608486031215611b84578081fd5b611b8d84611af7565b9250611b9b60208501611af7565b9150604084013590509250925092565b600080600080600080600060e0888a031215611bc5578283fd5b611bce88611af7565b9650611bdc60208901611af7565b95506040880135945060608801359350611bf860808901611b13565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215611c26578182fd5b611c2f83611af7565b946020939093013593505050565b60008060008060008060c08789031215611c55578182fd5b611c5e87611af7565b95506020870135945060408701359350611c7a60608801611b13565b92506080870135915060a087013590509295509295509295565b60008060408385031215611ca6578182fd5b611caf83611af7565b9150602083013563ffffffff81168114611cc7578182fd5b809150509250929050565b6000602080835283518082850152825b81811015611cfe57858101830151858201604001528201611ce2565b81811115611d0f5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252602a908201527f54726962653a2063616e6e6f74207472616e7366657220746f20746865207a65604082015269726f206164647265737360b01b606082015260800190565b600063ffffffff808316818516808303821115611d8e57611d8e611e48565b01949350505050565b60006001600160601b03808316818516808303821115611d8e57611d8e611e48565b600063ffffffff80841680611ddc57634e487b7160e01b83526012600452602483fd5b92169190910492915050565b600063ffffffff83811690831681811015611e0557611e05611e48565b039392505050565b60006001600160601b0383811690831681811015611e0557611e05611e48565b6000600019821415611e4157611e41611e48565b5060010190565b634e487b7160e01b600052601160045260246000fdfe54726962653a20626c6f636b206e756d6265722065786365656473203332206269747354726962653a20746f74616c537570706c792065786365656473203936206269747354726962653a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e636554726962653a207472616e7366657220616d6f756e7420657863656564732062616c616e636554726962653a20616d6f756e7420657863656564732039362062697473000000a264697066735822122050f5b6681eb38448fe50a00f84118b11e7028782d67e11a11985fdeab7aa0ef064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063c3cda5201161007c578063c3cda520146103ca578063d505accf146103dd578063dd62ed3e146103f0578063e7a324dc14610432578063f1127ed814610459578063fca3b5aa146104c057600080fd5b806370a0823114610303578063782d6fe1146103355780637ecebe001461036057806395d89b4114610380578063a9059cbb146103a4578063b4b5ea57146103b757600080fd5b806330adf81f1161011557806330adf81f14610236578063313ce5671461025d57806340c10f1914610277578063587cde1e1461028c5780635c19a95c146102b55780636fcfff45146102c857600080fd5b806306fdde031461015d5780630754617214610197578063095ea7b3146101c257806318160ddd146101e557806320606b70146101fc57806323b872dd14610223575b600080fd5b61018160405180604001604052806005815260200164547269626560d81b81525081565b60405161018e9190611cd2565b60405180910390f35b6001546101aa906001600160a01b031681565b6040516001600160a01b03909116815260200161018e565b6101d56101d0366004611c14565b6104d3565b604051901515815260200161018e565b6101ee60005481565b60405190815260200161018e565b6101ee7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6101d5610231366004611b70565b61059f565b6101ee7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610265601281565b60405160ff909116815260200161018e565b61028a610285366004611c14565b6106ec565b005b6101aa61029a366004611b24565b6004602052600090815260409020546001600160a01b031681565b61028a6102c3366004611b24565b6108ec565b6102ee6102d6366004611b24565b60066020526000908152604090205463ffffffff1681565b60405163ffffffff909116815260200161018e565b6101ee610311366004611b24565b6001600160a01b03166000908152600360205260409020546001600160601b031690565b610348610343366004611c14565b6108f9565b6040516001600160601b03909116815260200161018e565b6101ee61036e366004611b24565b60076020526000908152604090205481565b61018160405180604001604052806005815260200164545249424560d81b81525081565b6101d56103b2366004611c14565b610b70565b6103486103c5366004611b24565b610bb7565b61028a6103d8366004611c3d565b610c35565b61028a6103eb366004611bab565b610ee2565b6101ee6103fe366004611b3e565b6001600160a01b0391821660009081526002602090815260408083209390941682529190915220546001600160601b031690565b6101ee7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b61049c610467366004611c94565b600560209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6040805163ffffffff90931683526001600160601b0390911660208301520161018e565b61028a6104ce366004611b24565b6112c6565b6000806000198314156104ee57506001600160601b0361051e565b61051b836040518060400160405280601d8152602001600080516020611efa8339815191528152506113a6565b90505b3360008181526002602090815260408083206001600160a01b0389168085529083529281902080546001600160601b0319166001600160601b03871690811790915590519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a360019150505b92915050565b6001600160a01b038316600090815260026020908152604080832033808552908352818420548251808401909352601d8352600080516020611efa83398151915293830193909352916001600160601b03169083906105ff9086906113a6565b9050866001600160a01b0316836001600160a01b03161415801561062c57506001600160601b0382811614155b156106d45760006106568383604051806060016040528060308152602001611ea4603091396113d5565b6001600160a01b038981166000818152600260209081526040808320948a168084529482529182902080546001600160601b0319166001600160601b0387169081179091559151918252939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b6106df87878361141f565b5060019695505050505050565b6001546001600160a01b0316331461074b5760405162461bcd60e51b815260206004820152601f60248201527f54726962653a206f6e6c7920746865206d696e7465722063616e206d696e740060448201526064015b60405180910390fd5b6001600160a01b0382166107715760405162461bcd60e51b815260040161074290611d25565b60006107a0826040518060400160405280601d8152602001600080516020611efa8339815191528152506113a6565b905060006107c8600054604051806060016040528060228152602001611e82602291396113a6565b90506107ed8183604051806060016040528060228152602001611e8260229139611621565b6001600160601b0390811660009081556001600160a01b0386168152600360209081526040918290205482518084019093528183527f54726962653a207472616e7366657220616d6f756e74206f766572666c6f7773918301919091526108579216908490611621565b6001600160a01b038516600081815260036020908152604080832080546001600160601b0319166001600160601b03968716179055519386168452919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36001600160a01b038085166000908152600460205260408120546108e692168461166e565b50505050565b6108f63382611854565b50565b600043821061094a5760405162461bcd60e51b815260206004820152601960248201527f54726962653a206e6f74207965742064657465726d696e6564000000000000006044820152606401610742565b6001600160a01b03831660009081526006602052604090205463ffffffff1680610978576000915050610599565b6001600160a01b0384166000908152600560205260408120849161099d600185611de8565b63ffffffff90811682526020820192909252604001600020541611610a10576001600160a01b0384166000908152600560205260408120906109e0600184611de8565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b031691506105999050565b6001600160a01b038416600090815260056020908152604080832083805290915290205463ffffffff16831015610a4b576000915050610599565b600080610a59600184611de8565b90505b8163ffffffff168163ffffffff161115610b2b5760006002610a7e8484611de8565b610a889190611db9565b610a929083611de8565b6001600160a01b038816600090815260056020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b031691810191909152919250871415610aff576020015194506105999350505050565b805163ffffffff16871115610b1657819350610b24565b610b21600183611de8565b92505b5050610a5c565b506001600160a01b038516600090815260056020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b600080610ba0836040518060400160405280601d8152602001600080516020611efa8339815191528152506113a6565b9050610bad33858361141f565b5060019392505050565b6001600160a01b03811660009081526006602052604081205463ffffffff1680610be2576000610c2e565b6001600160a01b038316600090815260056020526040812090610c06600184611de8565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b9392505050565b6040805180820182526005815264547269626560d81b60209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527febed0dee75115424b4c6084a9ab165e0c99bcf5a44403d7510e1ad1caeaea50681840152466060820152306080808301919091528351808303909101815260a0820184528051908301207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08301526001600160a01b038a1660e083015261010082018990526101208083018990528451808403909101815261014083019094528351939092019290922061190160f01b6101608401526101628301829052610182830181905290916000906101a20160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015610db5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e135760405162461bcd60e51b815260206004820152601860248201527754726962653a20696e76616c6964207369676e617475726560401b6044820152606401610742565b6001600160a01b0381166000908152600760205260408120805491610e3783611e2d565b919050558914610e805760405162461bcd60e51b815260206004820152601460248201527354726962653a20696e76616c6964206e6f6e636560601b6044820152606401610742565b87421115610ecb5760405162461bcd60e51b8152602060048201526018602482015277151c9a58994e881cda59db985d1d5c9948195e1c1a5c995960421b6044820152606401610742565b610ed5818b611854565b505050505b505050505050565b6000600019861415610efc57506001600160601b03610f2c565b610f29866040518060400160405280601d8152602001600080516020611efa8339815191528152506113a6565b90505b6040805180820182526005815264547269626560d81b60209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527febed0dee75115424b4c6084a9ab165e0c99bcf5a44403d7510e1ad1caeaea50681840152466060820152306080808301919091528351808303909101815260a090910183528051908201206001600160a01b038b166000908152600790925291812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918c918c918c91908661100783611e2d565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e0016040516020818303038152906040528051906020012090506000828260405160200161108692919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff8b169284019290925260608301899052608083018890529092509060019060a0016020604051602081039080840390855afa1580156110f1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661114f5760405162461bcd60e51b815260206004820152601860248201527754726962653a20696e76616c6964207369676e617475726560401b6044820152606401610742565b8b6001600160a01b0316816001600160a01b0316146111a65760405162461bcd60e51b8152602060048201526013602482015272151c9a58994e881d5b985d5d1a1bdc9a5e9959606a1b6044820152606401610742565b884211156111f15760405162461bcd60e51b8152602060048201526018602482015277151c9a58994e881cda59db985d1d5c9948195e1c1a5c995960421b6044820152606401610742565b84600260008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160601b0302191690836001600160601b031602179055508a6001600160a01b03168c6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925876040516112b091906001600160601b0391909116815260200190565b60405180910390a3505050505050505050505050565b6001546001600160a01b0316331461133d5760405162461bcd60e51b815260206004820152603460248201527f54726962653a206f6e6c7920746865206d696e7465722063616e206368616e676044820152736520746865206d696e746572206164647265737360601b6064820152608401610742565b600154604080516001600160a01b03928316815291831660208301527f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6910160405180910390a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b600081600160601b84106113cd5760405162461bcd60e51b81526004016107429190611cd2565b509192915050565b6000836001600160601b0316836001600160601b03161115829061140c5760405162461bcd60e51b81526004016107429190611cd2565b506114178385611e0d565b949350505050565b6001600160a01b03831661148a5760405162461bcd60e51b815260206004820152602c60248201527f54726962653a2063616e6e6f74207472616e736665722066726f6d207468652060448201526b7a65726f206164647265737360a01b6064820152608401610742565b6001600160a01b0382166114b05760405162461bcd60e51b815260040161074290611d25565b6001600160a01b0383166000908152600360209081526040918290205482516060810190935260268084526114fb936001600160601b039092169285929190611ed4908301396113d5565b6001600160a01b03848116600090815260036020908152604080832080546001600160601b0319166001600160601b039687161790559286168252908290205482518084019093528183527f54726962653a207472616e7366657220616d6f756e74206f766572666c6f77739183019190915261157b9216908390611621565b6001600160a01b0383811660008181526003602090815260409182902080546001600160601b0319166001600160601b03968716179055905193851684529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36001600160a01b0380841660009081526004602052604080822054858416835291205461161c9291821691168361166e565b505050565b60008061162e8486611d97565b9050846001600160601b0316816001600160601b0316101583906116655760405162461bcd60e51b81526004016107429190611cd2565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561169957506000816001600160601b0316115b1561161c576001600160a01b0383161561177b576001600160a01b03831660009081526006602052604081205463ffffffff1690816116d9576000611725565b6001600160a01b0385166000908152600560205260408120906116fd600185611de8565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b9050600061176982856040518060400160405280601d81526020017f54726962653a20766f746520616d6f756e7420756e646572666c6f77730000008152506113d5565b9050611777868484846118d8565b5050505b6001600160a01b0382161561161c576001600160a01b03821660009081526006602052604081205463ffffffff1690816117b6576000611802565b6001600160a01b0384166000908152600560205260408120906117da600185611de8565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b9050600061184682856040518060400160405280601c81526020017f54726962653a20766f746520616d6f756e74206f766572666c6f777300000000815250611621565b9050610eda858484846118d8565b6001600160a01b03808316600081815260046020818152604080842080546003845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46108e682848361166e565b60006118fc43604051806060016040528060238152602001611e5f60239139611ad0565b905060008463ffffffff1611801561195657506001600160a01b038516600090815260056020526040812063ffffffff83169161193a600188611de8565b63ffffffff908116825260208201929092526040016000205416145b156119ca576001600160a01b03851660009081526005602052604081208391611980600188611de8565b63ffffffff168152602081019190915260400160002080546001600160601b0392909216600160201b026fffffffffffffffffffffffff0000000019909216919091179055611a7b565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000908152600582528681208b8616825290915294909420925183549451909116600160201b026fffffffffffffffffffffffffffffffff19909416911617919091179055611a4a846001611d6f565b6001600160a01b0386166000908152600660205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160601b038086168252841660208201526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b600081600160201b84106113cd5760405162461bcd60e51b81526004016107429190611cd2565b80356001600160a01b0381168114611b0e57600080fd5b919050565b803560ff81168114611b0e57600080fd5b600060208284031215611b35578081fd5b610c2e82611af7565b60008060408385031215611b50578081fd5b611b5983611af7565b9150611b6760208401611af7565b90509250929050565b600080600060608486031215611b84578081fd5b611b8d84611af7565b9250611b9b60208501611af7565b9150604084013590509250925092565b600080600080600080600060e0888a031215611bc5578283fd5b611bce88611af7565b9650611bdc60208901611af7565b95506040880135945060608801359350611bf860808901611b13565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215611c26578182fd5b611c2f83611af7565b946020939093013593505050565b60008060008060008060c08789031215611c55578182fd5b611c5e87611af7565b95506020870135945060408701359350611c7a60608801611b13565b92506080870135915060a087013590509295509295509295565b60008060408385031215611ca6578182fd5b611caf83611af7565b9150602083013563ffffffff81168114611cc7578182fd5b809150509250929050565b6000602080835283518082850152825b81811015611cfe57858101830151858201604001528201611ce2565b81811115611d0f5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252602a908201527f54726962653a2063616e6e6f74207472616e7366657220746f20746865207a65604082015269726f206164647265737360b01b606082015260800190565b600063ffffffff808316818516808303821115611d8e57611d8e611e48565b01949350505050565b60006001600160601b03808316818516808303821115611d8e57611d8e611e48565b600063ffffffff80841680611ddc57634e487b7160e01b83526012600452602483fd5b92169190910492915050565b600063ffffffff83811690831681811015611e0557611e05611e48565b039392505050565b60006001600160601b0383811690831681811015611e0557611e05611e48565b6000600019821415611e4157611e41611e48565b5060010190565b634e487b7160e01b600052601160045260246000fdfe54726962653a20626c6f636b206e756d6265722065786365656473203332206269747354726962653a20746f74616c537570706c792065786365656473203936206269747354726962653a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e636554726962653a207472616e7366657220616d6f756e7420657863656564732062616c616e636554726962653a20616d6f756e7420657863656564732039362062697473000000a264697066735822122050f5b6681eb38448fe50a00f84118b11e7028782d67e11a11985fdeab7aa0ef064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "constructor": {
        "params": {
          "account": "The initial account to grant all the tokens",
          "minter_": "The account with minting ability"
        }
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to be minted"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature"
        }
      },
      "setMinter(address)": {
        "params": {
          "minter_": "The address of the new minter"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "The standard EIP-20 approval event"
      },
      "DelegateChanged(address,address,address)": {
        "notice": "An event thats emitted when an account changes its delegate"
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "notice": "An event thats emitted when a delegate account's vote balance changes"
      },
      "MinterChanged(address,address)": {
        "notice": "An event thats emitted when the minter address is changed"
      },
      "Transfer(address,address,uint256)": {
        "notice": "The standard EIP-20 transfer event"
      }
    },
    "kind": "user",
    "methods": {
      "DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the permit struct used by the contract"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkpoints(address,uint32)": {
        "notice": "A record of votes checkpoints for each account, by index"
      },
      "constructor": {
        "notice": "Construct a new Tribe token"
      },
      "decimals()": {
        "notice": "EIP-20 token decimals for this token"
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "delegates(address)": {
        "notice": "A record of each accounts delegate"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "mint(address,uint256)": {
        "notice": "Mint new tokens"
      },
      "minter()": {
        "notice": "Address which may mint new tokens"
      },
      "name()": {
        "notice": "EIP-20 token name for this token"
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "numCheckpoints(address)": {
        "notice": "The number of checkpoints for each account"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spends"
      },
      "setMinter(address)": {
        "notice": "Change the minter address"
      },
      "symbol()": {
        "notice": "EIP-20 token symbol for this token"
      },
      "totalSupply()": {
        "notice": "Total number of tokens in circulation"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2109,
        "contract": "contracts/dao/Tribe.sol:Tribe",
        "label": "totalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2112,
        "contract": "contracts/dao/Tribe.sol:Tribe",
        "label": "minter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2119,
        "contract": "contracts/dao/Tribe.sol:Tribe",
        "label": "allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint96))"
      },
      {
        "astId": 2124,
        "contract": "contracts/dao/Tribe.sol:Tribe",
        "label": "balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint96)"
      },
      {
        "astId": 2129,
        "contract": "contracts/dao/Tribe.sol:Tribe",
        "label": "delegates",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2142,
        "contract": "contracts/dao/Tribe.sol:Tribe",
        "label": "checkpoints",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2134_storage))"
      },
      {
        "astId": 2147,
        "contract": "contracts/dao/Tribe.sol:Tribe",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 2170,
        "contract": "contracts/dao/Tribe.sol:Tribe",
        "label": "nonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint96))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint96))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint96)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2134_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct Tribe.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)2134_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_address,t_uint96)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)2134_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct Tribe.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)2134_storage"
      },
      "t_struct(Checkpoint)2134_storage": {
        "encoding": "inplace",
        "label": "struct Tribe.Checkpoint",
        "members": [
          {
            "astId": 2131,
            "contract": "contracts/dao/Tribe.sol:Tribe",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2133,
            "contract": "contracts/dao/Tribe.sol:Tribe",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}